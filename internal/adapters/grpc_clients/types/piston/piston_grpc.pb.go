// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.0
// source: piston.proto

package piston

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Piston_ConnectMDGateway_FullMethodName      = "/Piston/ConnectMDGateway"
	Piston_ConnectTradingGateway_FullMethodName = "/Piston/ConnectTradingGateway"
)

// PistonClient is the client API for Piston service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PistonClient interface {
	ConnectMDGateway(ctx context.Context, opts ...grpc.CallOption) (Piston_ConnectMDGatewayClient, error)
	ConnectTradingGateway(ctx context.Context, opts ...grpc.CallOption) (Piston_ConnectTradingGatewayClient, error)
}

type pistonClient struct {
	cc grpc.ClientConnInterface
}

func NewPistonClient(cc grpc.ClientConnInterface) PistonClient {
	return &pistonClient{cc}
}

func (c *pistonClient) ConnectMDGateway(ctx context.Context, opts ...grpc.CallOption) (Piston_ConnectMDGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Piston_ServiceDesc.Streams[0], Piston_ConnectMDGateway_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pistonConnectMDGatewayClient{stream}
	return x, nil
}

type Piston_ConnectMDGatewayClient interface {
	Send(*MarketdataMessage) error
	Recv() (*MarketdataMessage, error)
	grpc.ClientStream
}

type pistonConnectMDGatewayClient struct {
	grpc.ClientStream
}

func (x *pistonConnectMDGatewayClient) Send(m *MarketdataMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pistonConnectMDGatewayClient) Recv() (*MarketdataMessage, error) {
	m := new(MarketdataMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pistonClient) ConnectTradingGateway(ctx context.Context, opts ...grpc.CallOption) (Piston_ConnectTradingGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Piston_ServiceDesc.Streams[1], Piston_ConnectTradingGateway_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pistonConnectTradingGatewayClient{stream}
	return x, nil
}

type Piston_ConnectTradingGatewayClient interface {
	Send(*TradingMessage) error
	Recv() (*TradingMessage, error)
	grpc.ClientStream
}

type pistonConnectTradingGatewayClient struct {
	grpc.ClientStream
}

func (x *pistonConnectTradingGatewayClient) Send(m *TradingMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pistonConnectTradingGatewayClient) Recv() (*TradingMessage, error) {
	m := new(TradingMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PistonServer is the server API for Piston service.
// All implementations must embed UnimplementedPistonServer
// for forward compatibility
type PistonServer interface {
	ConnectMDGateway(Piston_ConnectMDGatewayServer) error
	ConnectTradingGateway(Piston_ConnectTradingGatewayServer) error
	mustEmbedUnimplementedPistonServer()
}

// UnimplementedPistonServer must be embedded to have forward compatible implementations.
type UnimplementedPistonServer struct {
}

func (UnimplementedPistonServer) ConnectMDGateway(Piston_ConnectMDGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectMDGateway not implemented")
}
func (UnimplementedPistonServer) ConnectTradingGateway(Piston_ConnectTradingGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectTradingGateway not implemented")
}
func (UnimplementedPistonServer) mustEmbedUnimplementedPistonServer() {}

// UnsafePistonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PistonServer will
// result in compilation errors.
type UnsafePistonServer interface {
	mustEmbedUnimplementedPistonServer()
}

func RegisterPistonServer(s grpc.ServiceRegistrar, srv PistonServer) {
	s.RegisterService(&Piston_ServiceDesc, srv)
}

func _Piston_ConnectMDGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PistonServer).ConnectMDGateway(&pistonConnectMDGatewayServer{stream})
}

type Piston_ConnectMDGatewayServer interface {
	Send(*MarketdataMessage) error
	Recv() (*MarketdataMessage, error)
	grpc.ServerStream
}

type pistonConnectMDGatewayServer struct {
	grpc.ServerStream
}

func (x *pistonConnectMDGatewayServer) Send(m *MarketdataMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pistonConnectMDGatewayServer) Recv() (*MarketdataMessage, error) {
	m := new(MarketdataMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Piston_ConnectTradingGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PistonServer).ConnectTradingGateway(&pistonConnectTradingGatewayServer{stream})
}

type Piston_ConnectTradingGatewayServer interface {
	Send(*TradingMessage) error
	Recv() (*TradingMessage, error)
	grpc.ServerStream
}

type pistonConnectTradingGatewayServer struct {
	grpc.ServerStream
}

func (x *pistonConnectTradingGatewayServer) Send(m *TradingMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pistonConnectTradingGatewayServer) Recv() (*TradingMessage, error) {
	m := new(TradingMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Piston_ServiceDesc is the grpc.ServiceDesc for Piston service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Piston_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Piston",
	HandlerType: (*PistonServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectMDGateway",
			Handler:       _Piston_ConnectMDGateway_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectTradingGateway",
			Handler:       _Piston_ConnectTradingGateway_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "piston.proto",
}
