// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.0
// source: piston.proto

package piston

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderSide int32

const (
	OrderSide_UNKNOWN OrderSide = 0
	OrderSide_BID     OrderSide = 1
	OrderSide_ASK     OrderSide = 2
)

// Enum value maps for OrderSide.
var (
	OrderSide_name = map[int32]string{
		0: "UNKNOWN",
		1: "BID",
		2: "ASK",
	}
	OrderSide_value = map[string]int32{
		"UNKNOWN": 0,
		"BID":     1,
		"ASK":     2,
	}
)

func (x OrderSide) Enum() *OrderSide {
	p := new(OrderSide)
	*p = x
	return p
}

func (x OrderSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSide) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[0].Descriptor()
}

func (OrderSide) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[0]
}

func (x OrderSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSide.Descriptor instead.
func (OrderSide) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{0}
}

type AggrSide int32

const (
	AggrSide_MAKER AggrSide = 0
	AggrSide_TAKER AggrSide = 1
)

// Enum value maps for AggrSide.
var (
	AggrSide_name = map[int32]string{
		0: "MAKER",
		1: "TAKER",
	}
	AggrSide_value = map[string]int32{
		"MAKER": 0,
		"TAKER": 1,
	}
)

func (x AggrSide) Enum() *AggrSide {
	p := new(AggrSide)
	*p = x
	return p
}

func (x AggrSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggrSide) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[1].Descriptor()
}

func (AggrSide) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[1]
}

func (x AggrSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggrSide.Descriptor instead.
func (AggrSide) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{1}
}

type OrderType int32

const (
	OrderType_UNKNOWN_TYPE OrderType = 0
	OrderType_LIMIT        OrderType = 1
	OrderType_POST_ONLY    OrderType = 2
	OrderType_MARKET       OrderType = 3
	OrderType_LIMIT_FOK    OrderType = 4
	OrderType_LIMIT_IOC    OrderType = 5
	OrderType_MARKET_FOK   OrderType = 6
	OrderType_MARKET_IOC   OrderType = 7
)

// Enum value maps for OrderType.
var (
	OrderType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "LIMIT",
		2: "POST_ONLY",
		3: "MARKET",
		4: "LIMIT_FOK",
		5: "LIMIT_IOC",
		6: "MARKET_FOK",
		7: "MARKET_IOC",
	}
	OrderType_value = map[string]int32{
		"UNKNOWN_TYPE": 0,
		"LIMIT":        1,
		"POST_ONLY":    2,
		"MARKET":       3,
		"LIMIT_FOK":    4,
		"LIMIT_IOC":    5,
		"MARKET_FOK":   6,
		"MARKET_IOC":   7,
	}
)

func (x OrderType) Enum() *OrderType {
	p := new(OrderType)
	*p = x
	return p
}

func (x OrderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderType) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[2].Descriptor()
}

func (OrderType) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[2]
}

func (x OrderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderType.Descriptor instead.
func (OrderType) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{2}
}

type OrderStatus int32

const (
	OrderStatus_NONE            OrderStatus = 0
	OrderStatus_NEW             OrderStatus = 1
	OrderStatus_OPENED          OrderStatus = 2
	OrderStatus_PENDING_CANCEL  OrderStatus = 3
	OrderStatus_CANCELLED       OrderStatus = 4
	OrderStatus_REJECTED_CANCEL OrderStatus = 5
	OrderStatus_PENDING_MOVE    OrderStatus = 6
	OrderStatus_MOVED           OrderStatus = 7
	OrderStatus_FILL            OrderStatus = 8
	OrderStatus_DONE            OrderStatus = 9
	OrderStatus_REJECTED        OrderStatus = 10
	OrderStatus_INTERNAL_ERROR  OrderStatus = 11
	OrderStatus_REJECTED_MOVE   OrderStatus = 12
)

// Enum value maps for OrderStatus.
var (
	OrderStatus_name = map[int32]string{
		0:  "NONE",
		1:  "NEW",
		2:  "OPENED",
		3:  "PENDING_CANCEL",
		4:  "CANCELLED",
		5:  "REJECTED_CANCEL",
		6:  "PENDING_MOVE",
		7:  "MOVED",
		8:  "FILL",
		9:  "DONE",
		10: "REJECTED",
		11: "INTERNAL_ERROR",
		12: "REJECTED_MOVE",
	}
	OrderStatus_value = map[string]int32{
		"NONE":            0,
		"NEW":             1,
		"OPENED":          2,
		"PENDING_CANCEL":  3,
		"CANCELLED":       4,
		"REJECTED_CANCEL": 5,
		"PENDING_MOVE":    6,
		"MOVED":           7,
		"FILL":            8,
		"DONE":            9,
		"REJECTED":        10,
		"INTERNAL_ERROR":  11,
		"REJECTED_MOVE":   12,
	}
)

func (x OrderStatus) Enum() *OrderStatus {
	p := new(OrderStatus)
	*p = x
	return p
}

func (x OrderStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[3].Descriptor()
}

func (OrderStatus) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[3]
}

func (x OrderStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStatus.Descriptor instead.
func (OrderStatus) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{3}
}

type MarketdataMsgType int32

const (
	MarketdataMsgType_DISCONNECT MarketdataMsgType = 0
	MarketdataMsgType_SUBSCRIBE  MarketdataMsgType = 2
	MarketdataMsgType_BOOK       MarketdataMsgType = 3
)

// Enum value maps for MarketdataMsgType.
var (
	MarketdataMsgType_name = map[int32]string{
		0: "DISCONNECT",
		2: "SUBSCRIBE",
		3: "BOOK",
	}
	MarketdataMsgType_value = map[string]int32{
		"DISCONNECT": 0,
		"SUBSCRIBE":  2,
		"BOOK":       3,
	}
)

func (x MarketdataMsgType) Enum() *MarketdataMsgType {
	p := new(MarketdataMsgType)
	*p = x
	return p
}

func (x MarketdataMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MarketdataMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[4].Descriptor()
}

func (MarketdataMsgType) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[4]
}

func (x MarketdataMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MarketdataMsgType.Descriptor instead.
func (MarketdataMsgType) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{4}
}

type TradingMessageType int32

const (
	TradingMessageType_UnknownTradingMessageType   TradingMessageType = 0
	TradingMessageType_RequestBalance              TradingMessageType = 1
	TradingMessageType_ExchangeBalancesResponse    TradingMessageType = 2
	TradingMessageType_ExchangePositionsResponse   TradingMessageType = 3
	TradingMessageType_RequestTradeHistory         TradingMessageType = 4
	TradingMessageType_TradeHistoryResponse        TradingMessageType = 5
	TradingMessageType_OpenOrdersResponse          TradingMessageType = 6
	TradingMessageType_RequestOpenOrders           TradingMessageType = 7
	TradingMessageType_RateLimitExceedError        TradingMessageType = 8
	TradingMessageType_RequestInstrumentsDetails   TradingMessageType = 9
	TradingMessageType_InstrumentsDetailsResponse  TradingMessageType = 10
	TradingMessageType_AddOrderRequest             TradingMessageType = 21
	TradingMessageType_OrderAddedResponse          TradingMessageType = 22
	TradingMessageType_OrderAddRejectedResponse    TradingMessageType = 23
	TradingMessageType_MoveOrderRequest            TradingMessageType = 24
	TradingMessageType_OrderMovedResponse          TradingMessageType = 25
	TradingMessageType_OrderMoveRejectedResponse   TradingMessageType = 26
	TradingMessageType_CancelOrderRequest          TradingMessageType = 27
	TradingMessageType_OrderCancelledResponse      TradingMessageType = 28
	TradingMessageType_OrderCancelRejectedResponse TradingMessageType = 29
	TradingMessageType_OrderFilledResponse         TradingMessageType = 31
	TradingMessageType_OrderExecutedResponse       TradingMessageType = 32
	TradingMessageType_CancelAllRequest            TradingMessageType = 33
)

// Enum value maps for TradingMessageType.
var (
	TradingMessageType_name = map[int32]string{
		0:  "UnknownTradingMessageType",
		1:  "RequestBalance",
		2:  "ExchangeBalancesResponse",
		3:  "ExchangePositionsResponse",
		4:  "RequestTradeHistory",
		5:  "TradeHistoryResponse",
		6:  "OpenOrdersResponse",
		7:  "RequestOpenOrders",
		8:  "RateLimitExceedError",
		9:  "RequestInstrumentsDetails",
		10: "InstrumentsDetailsResponse",
		21: "AddOrderRequest",
		22: "OrderAddedResponse",
		23: "OrderAddRejectedResponse",
		24: "MoveOrderRequest",
		25: "OrderMovedResponse",
		26: "OrderMoveRejectedResponse",
		27: "CancelOrderRequest",
		28: "OrderCancelledResponse",
		29: "OrderCancelRejectedResponse",
		31: "OrderFilledResponse",
		32: "OrderExecutedResponse",
		33: "CancelAllRequest",
	}
	TradingMessageType_value = map[string]int32{
		"UnknownTradingMessageType":   0,
		"RequestBalance":              1,
		"ExchangeBalancesResponse":    2,
		"ExchangePositionsResponse":   3,
		"RequestTradeHistory":         4,
		"TradeHistoryResponse":        5,
		"OpenOrdersResponse":          6,
		"RequestOpenOrders":           7,
		"RateLimitExceedError":        8,
		"RequestInstrumentsDetails":   9,
		"InstrumentsDetailsResponse":  10,
		"AddOrderRequest":             21,
		"OrderAddedResponse":          22,
		"OrderAddRejectedResponse":    23,
		"MoveOrderRequest":            24,
		"OrderMovedResponse":          25,
		"OrderMoveRejectedResponse":   26,
		"CancelOrderRequest":          27,
		"OrderCancelledResponse":      28,
		"OrderCancelRejectedResponse": 29,
		"OrderFilledResponse":         31,
		"OrderExecutedResponse":       32,
		"CancelAllRequest":            33,
	}
)

func (x TradingMessageType) Enum() *TradingMessageType {
	p := new(TradingMessageType)
	*p = x
	return p
}

func (x TradingMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradingMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_piston_proto_enumTypes[5].Descriptor()
}

func (TradingMessageType) Type() protoreflect.EnumType {
	return &file_piston_proto_enumTypes[5]
}

func (x TradingMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradingMessageType.Descriptor instead.
func (TradingMessageType) EnumDescriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{5}
}

type SubscribeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instruments []string `protobuf:"bytes,1,rep,name=instruments,proto3" json:"instruments,omitempty"`
}

func (x *SubscribeMessage) Reset() {
	*x = SubscribeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeMessage) ProtoMessage() {}

func (x *SubscribeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeMessage.ProtoReflect.Descriptor instead.
func (*SubscribeMessage) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{0}
}

func (x *SubscribeMessage) GetInstruments() []string {
	if x != nil {
		return x.Instruments
	}
	return nil
}

type BookMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Book *OrderBookSnapshot `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
}

func (x *BookMessage) Reset() {
	*x = BookMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookMessage) ProtoMessage() {}

func (x *BookMessage) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookMessage.ProtoReflect.Descriptor instead.
func (*BookMessage) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{1}
}

func (x *BookMessage) GetBook() *OrderBookSnapshot {
	if x != nil {
		return x.Book
	}
	return nil
}

type MarketdataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType MarketdataMsgType `protobuf:"varint,1,opt,name=msgType,proto3,enum=MarketdataMsgType" json:"msgType,omitempty"`
	// Types that are assignable to Message:
	//
	//	*MarketdataMessage_SubscribeMessage
	//	*MarketdataMessage_BookMessage
	Message isMarketdataMessage_Message `protobuf_oneof:"message"`
}

func (x *MarketdataMessage) Reset() {
	*x = MarketdataMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarketdataMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarketdataMessage) ProtoMessage() {}

func (x *MarketdataMessage) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarketdataMessage.ProtoReflect.Descriptor instead.
func (*MarketdataMessage) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{2}
}

func (x *MarketdataMessage) GetMsgType() MarketdataMsgType {
	if x != nil {
		return x.MsgType
	}
	return MarketdataMsgType_DISCONNECT
}

func (m *MarketdataMessage) GetMessage() isMarketdataMessage_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *MarketdataMessage) GetSubscribeMessage() *SubscribeMessage {
	if x, ok := x.GetMessage().(*MarketdataMessage_SubscribeMessage); ok {
		return x.SubscribeMessage
	}
	return nil
}

func (x *MarketdataMessage) GetBookMessage() *BookMessage {
	if x, ok := x.GetMessage().(*MarketdataMessage_BookMessage); ok {
		return x.BookMessage
	}
	return nil
}

type isMarketdataMessage_Message interface {
	isMarketdataMessage_Message()
}

type MarketdataMessage_SubscribeMessage struct {
	SubscribeMessage *SubscribeMessage `protobuf:"bytes,12,opt,name=subscribeMessage,proto3,oneof"`
}

type MarketdataMessage_BookMessage struct {
	BookMessage *BookMessage `protobuf:"bytes,13,opt,name=bookMessage,proto3,oneof"`
}

func (*MarketdataMessage_SubscribeMessage) isMarketdataMessage_Message() {}

func (*MarketdataMessage_BookMessage) isMarketdataMessage_Message() {}

type RateLimitExceedMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RateLimitExceedMsg) Reset() {
	*x = RateLimitExceedMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RateLimitExceedMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RateLimitExceedMsg) ProtoMessage() {}

func (x *RateLimitExceedMsg) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RateLimitExceedMsg.ProtoReflect.Descriptor instead.
func (*RateLimitExceedMsg) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{3}
}

type TradingMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TradingMessageType `protobuf:"varint,1,opt,name=type,proto3,enum=TradingMessageType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//
	//	*TradingMessage_Balances
	//	*TradingMessage_OpenOrders
	//	*TradingMessage_OpenOrdersRequest
	//	*TradingMessage_RateLimitExceed
	//	*TradingMessage_InstrumentsDetailsRequest
	//	*TradingMessage_InstrumentsDetailsResponse
	//	*TradingMessage_AddOrder
	//	*TradingMessage_OrderAdded
	//	*TradingMessage_OrderAddRejected
	//	*TradingMessage_MoveOrder
	//	*TradingMessage_OrderMoved
	//	*TradingMessage_OrderMoveRejected
	//	*TradingMessage_CancelOrder
	//	*TradingMessage_OrderCancelled
	//	*TradingMessage_OrderCancelRejected
	//	*TradingMessage_OrderFilled
	//	*TradingMessage_OrderExecuted
	//	*TradingMessage_CancelAll
	Data isTradingMessage_Data `protobuf_oneof:"data"`
}

func (x *TradingMessage) Reset() {
	*x = TradingMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingMessage) ProtoMessage() {}

func (x *TradingMessage) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingMessage.ProtoReflect.Descriptor instead.
func (*TradingMessage) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{4}
}

func (x *TradingMessage) GetType() TradingMessageType {
	if x != nil {
		return x.Type
	}
	return TradingMessageType_UnknownTradingMessageType
}

func (m *TradingMessage) GetData() isTradingMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *TradingMessage) GetBalances() *ExchangeBalances {
	if x, ok := x.GetData().(*TradingMessage_Balances); ok {
		return x.Balances
	}
	return nil
}

func (x *TradingMessage) GetOpenOrders() *OpenOrdersRequestResult {
	if x, ok := x.GetData().(*TradingMessage_OpenOrders); ok {
		return x.OpenOrders
	}
	return nil
}

func (x *TradingMessage) GetOpenOrdersRequest() *OpenOrdersRequest {
	if x, ok := x.GetData().(*TradingMessage_OpenOrdersRequest); ok {
		return x.OpenOrdersRequest
	}
	return nil
}

func (x *TradingMessage) GetRateLimitExceed() *RateLimitExceedMsg {
	if x, ok := x.GetData().(*TradingMessage_RateLimitExceed); ok {
		return x.RateLimitExceed
	}
	return nil
}

func (x *TradingMessage) GetInstrumentsDetailsRequest() *InstrumentsDetailsRequest {
	if x, ok := x.GetData().(*TradingMessage_InstrumentsDetailsRequest); ok {
		return x.InstrumentsDetailsRequest
	}
	return nil
}

func (x *TradingMessage) GetInstrumentsDetailsResponse() *InstrumentsDetails {
	if x, ok := x.GetData().(*TradingMessage_InstrumentsDetailsResponse); ok {
		return x.InstrumentsDetailsResponse
	}
	return nil
}

func (x *TradingMessage) GetAddOrder() *AddOrder {
	if x, ok := x.GetData().(*TradingMessage_AddOrder); ok {
		return x.AddOrder
	}
	return nil
}

func (x *TradingMessage) GetOrderAdded() *OrderAdded {
	if x, ok := x.GetData().(*TradingMessage_OrderAdded); ok {
		return x.OrderAdded
	}
	return nil
}

func (x *TradingMessage) GetOrderAddRejected() *OrderAddRejected {
	if x, ok := x.GetData().(*TradingMessage_OrderAddRejected); ok {
		return x.OrderAddRejected
	}
	return nil
}

func (x *TradingMessage) GetMoveOrder() *MoveOrder {
	if x, ok := x.GetData().(*TradingMessage_MoveOrder); ok {
		return x.MoveOrder
	}
	return nil
}

func (x *TradingMessage) GetOrderMoved() *OrderMoved {
	if x, ok := x.GetData().(*TradingMessage_OrderMoved); ok {
		return x.OrderMoved
	}
	return nil
}

func (x *TradingMessage) GetOrderMoveRejected() *OrderMoveRejected {
	if x, ok := x.GetData().(*TradingMessage_OrderMoveRejected); ok {
		return x.OrderMoveRejected
	}
	return nil
}

func (x *TradingMessage) GetCancelOrder() *CancelOrder {
	if x, ok := x.GetData().(*TradingMessage_CancelOrder); ok {
		return x.CancelOrder
	}
	return nil
}

func (x *TradingMessage) GetOrderCancelled() *OrderCancelled {
	if x, ok := x.GetData().(*TradingMessage_OrderCancelled); ok {
		return x.OrderCancelled
	}
	return nil
}

func (x *TradingMessage) GetOrderCancelRejected() *OrderCancelRejected {
	if x, ok := x.GetData().(*TradingMessage_OrderCancelRejected); ok {
		return x.OrderCancelRejected
	}
	return nil
}

func (x *TradingMessage) GetOrderFilled() *OrderFilled {
	if x, ok := x.GetData().(*TradingMessage_OrderFilled); ok {
		return x.OrderFilled
	}
	return nil
}

func (x *TradingMessage) GetOrderExecuted() *OrderExecuted {
	if x, ok := x.GetData().(*TradingMessage_OrderExecuted); ok {
		return x.OrderExecuted
	}
	return nil
}

func (x *TradingMessage) GetCancelAll() *CancelAll {
	if x, ok := x.GetData().(*TradingMessage_CancelAll); ok {
		return x.CancelAll
	}
	return nil
}

type isTradingMessage_Data interface {
	isTradingMessage_Data()
}

type TradingMessage_Balances struct {
	Balances *ExchangeBalances `protobuf:"bytes,102,opt,name=balances,proto3,oneof"`
}

type TradingMessage_OpenOrders struct {
	OpenOrders *OpenOrdersRequestResult `protobuf:"bytes,106,opt,name=openOrders,proto3,oneof"`
}

type TradingMessage_OpenOrdersRequest struct {
	OpenOrdersRequest *OpenOrdersRequest `protobuf:"bytes,107,opt,name=openOrdersRequest,proto3,oneof"`
}

type TradingMessage_RateLimitExceed struct {
	RateLimitExceed *RateLimitExceedMsg `protobuf:"bytes,108,opt,name=rateLimitExceed,proto3,oneof"`
}

type TradingMessage_InstrumentsDetailsRequest struct {
	InstrumentsDetailsRequest *InstrumentsDetailsRequest `protobuf:"bytes,109,opt,name=instrumentsDetailsRequest,proto3,oneof"`
}

type TradingMessage_InstrumentsDetailsResponse struct {
	InstrumentsDetailsResponse *InstrumentsDetails `protobuf:"bytes,110,opt,name=instrumentsDetailsResponse,proto3,oneof"`
}

type TradingMessage_AddOrder struct {
	AddOrder *AddOrder `protobuf:"bytes,121,opt,name=addOrder,proto3,oneof"`
}

type TradingMessage_OrderAdded struct {
	OrderAdded *OrderAdded `protobuf:"bytes,122,opt,name=orderAdded,proto3,oneof"`
}

type TradingMessage_OrderAddRejected struct {
	OrderAddRejected *OrderAddRejected `protobuf:"bytes,123,opt,name=orderAddRejected,proto3,oneof"`
}

type TradingMessage_MoveOrder struct {
	MoveOrder *MoveOrder `protobuf:"bytes,124,opt,name=moveOrder,proto3,oneof"`
}

type TradingMessage_OrderMoved struct {
	OrderMoved *OrderMoved `protobuf:"bytes,125,opt,name=orderMoved,proto3,oneof"`
}

type TradingMessage_OrderMoveRejected struct {
	OrderMoveRejected *OrderMoveRejected `protobuf:"bytes,126,opt,name=orderMoveRejected,proto3,oneof"`
}

type TradingMessage_CancelOrder struct {
	CancelOrder *CancelOrder `protobuf:"bytes,127,opt,name=cancelOrder,proto3,oneof"`
}

type TradingMessage_OrderCancelled struct {
	OrderCancelled *OrderCancelled `protobuf:"bytes,128,opt,name=orderCancelled,proto3,oneof"`
}

type TradingMessage_OrderCancelRejected struct {
	OrderCancelRejected *OrderCancelRejected `protobuf:"bytes,129,opt,name=orderCancelRejected,proto3,oneof"`
}

type TradingMessage_OrderFilled struct {
	OrderFilled *OrderFilled `protobuf:"bytes,131,opt,name=orderFilled,proto3,oneof"`
}

type TradingMessage_OrderExecuted struct {
	OrderExecuted *OrderExecuted `protobuf:"bytes,132,opt,name=orderExecuted,proto3,oneof"`
}

type TradingMessage_CancelAll struct {
	CancelAll *CancelAll `protobuf:"bytes,133,opt,name=cancelAll,proto3,oneof"`
}

func (*TradingMessage_Balances) isTradingMessage_Data() {}

func (*TradingMessage_OpenOrders) isTradingMessage_Data() {}

func (*TradingMessage_OpenOrdersRequest) isTradingMessage_Data() {}

func (*TradingMessage_RateLimitExceed) isTradingMessage_Data() {}

func (*TradingMessage_InstrumentsDetailsRequest) isTradingMessage_Data() {}

func (*TradingMessage_InstrumentsDetailsResponse) isTradingMessage_Data() {}

func (*TradingMessage_AddOrder) isTradingMessage_Data() {}

func (*TradingMessage_OrderAdded) isTradingMessage_Data() {}

func (*TradingMessage_OrderAddRejected) isTradingMessage_Data() {}

func (*TradingMessage_MoveOrder) isTradingMessage_Data() {}

func (*TradingMessage_OrderMoved) isTradingMessage_Data() {}

func (*TradingMessage_OrderMoveRejected) isTradingMessage_Data() {}

func (*TradingMessage_CancelOrder) isTradingMessage_Data() {}

func (*TradingMessage_OrderCancelled) isTradingMessage_Data() {}

func (*TradingMessage_OrderCancelRejected) isTradingMessage_Data() {}

func (*TradingMessage_OrderFilled) isTradingMessage_Data() {}

func (*TradingMessage_OrderExecuted) isTradingMessage_Data() {}

func (*TradingMessage_CancelAll) isTradingMessage_Data() {}

type OrderBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument     string       `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Exchange       string       `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Timestamp      int64        `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	LocalTimestamp int64        `protobuf:"varint,4,opt,name=localTimestamp,proto3" json:"localTimestamp,omitempty"`
	Bids           []*LevelInfo `protobuf:"bytes,5,rep,name=bids,proto3" json:"bids,omitempty"`
	Asks           []*LevelInfo `protobuf:"bytes,6,rep,name=asks,proto3" json:"asks,omitempty"`
}

func (x *OrderBook) Reset() {
	*x = OrderBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBook) ProtoMessage() {}

func (x *OrderBook) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBook.ProtoReflect.Descriptor instead.
func (*OrderBook) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{5}
}

func (x *OrderBook) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *OrderBook) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderBook) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *OrderBook) GetLocalTimestamp() int64 {
	if x != nil {
		return x.LocalTimestamp
	}
	return 0
}

func (x *OrderBook) GetBids() []*LevelInfo {
	if x != nil {
		return x.Bids
	}
	return nil
}

func (x *OrderBook) GetAsks() []*LevelInfo {
	if x != nil {
		return x.Asks
	}
	return nil
}

type LevelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Price float64 `protobuf:"fixed64,1,opt,name=price,proto3" json:"price,omitempty"`
	Size  float64 `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *LevelInfo) Reset() {
	*x = LevelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelInfo) ProtoMessage() {}

func (x *LevelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelInfo.ProtoReflect.Descriptor instead.
func (*LevelInfo) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{6}
}

func (x *LevelInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *LevelInfo) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type LevelUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument string     `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Exchange   string     `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Timestamp  string     `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Info       *LevelInfo `protobuf:"bytes,4,opt,name=info,proto3" json:"info,omitempty"`
}

func (x *LevelUpdate) Reset() {
	*x = LevelUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelUpdate) ProtoMessage() {}

func (x *LevelUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelUpdate.ProtoReflect.Descriptor instead.
func (*LevelUpdate) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{7}
}

func (x *LevelUpdate) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *LevelUpdate) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *LevelUpdate) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *LevelUpdate) GetInfo() *LevelInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type OrderBookSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshot *OrderBook `protobuf:"bytes,1,opt,name=snapshot,proto3" json:"snapshot,omitempty"`
}

func (x *OrderBookSnapshot) Reset() {
	*x = OrderBookSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderBookSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderBookSnapshot) ProtoMessage() {}

func (x *OrderBookSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderBookSnapshot.ProtoReflect.Descriptor instead.
func (*OrderBookSnapshot) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{8}
}

func (x *OrderBookSnapshot) GetSnapshot() *OrderBook {
	if x != nil {
		return x.Snapshot
	}
	return nil
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientOrderRequestID  string      `protobuf:"bytes,1,opt,name=clientOrderRequestID,proto3" json:"clientOrderRequestID,omitempty"`
	ClientAccount         string      `protobuf:"bytes,2,opt,name=clientAccount,proto3" json:"clientAccount,omitempty"`
	ClientTag             string      `protobuf:"bytes,3,opt,name=clientTag,proto3" json:"clientTag,omitempty"`
	ExchangeID            string      `protobuf:"bytes,4,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	PistonClientOrderID   string      `protobuf:"bytes,5,opt,name=PistonClientOrderID,proto3" json:"PistonClientOrderID,omitempty"`
	ExchangeClientOrderID string      `protobuf:"bytes,6,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Exchange              string      `protobuf:"bytes,7,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExchangeAccount       string      `protobuf:"bytes,8,opt,name=exchangeAccount,proto3" json:"exchangeAccount,omitempty"`
	Side                  OrderSide   `protobuf:"varint,9,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Instrument            string      `protobuf:"bytes,10,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Type                  OrderType   `protobuf:"varint,11,opt,name=type,proto3,enum=OrderType" json:"type,omitempty"`
	Size                  float64     `protobuf:"fixed64,12,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64     `protobuf:"fixed64,13,opt,name=price,proto3" json:"price,omitempty"`
	RemainingSize         float64     `protobuf:"fixed64,14,opt,name=remainingSize,proto3" json:"remainingSize,omitempty"`
	Filled                float64     `protobuf:"fixed64,15,opt,name=filled,proto3" json:"filled,omitempty"`
	Volume                float64     `protobuf:"fixed64,16,opt,name=volume,proto3" json:"volume,omitempty"`
	Fee                   float64     `protobuf:"fixed64,17,opt,name=fee,proto3" json:"fee,omitempty"`
	FeeCurrency           string      `protobuf:"bytes,18,opt,name=feeCurrency,proto3" json:"feeCurrency,omitempty"`
	Created               int64       `protobuf:"varint,19,opt,name=created,proto3" json:"created,omitempty"`
	TradeID               string      `protobuf:"bytes,20,opt,name=tradeID,proto3" json:"tradeID,omitempty"`
	Market                string      `protobuf:"bytes,21,opt,name=market,proto3" json:"market,omitempty"`
	AggrSide              AggrSide    `protobuf:"varint,22,opt,name=aggrSide,proto3,enum=AggrSide" json:"aggrSide,omitempty"`
	LastUpdated           int64       `protobuf:"varint,23,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	Status                OrderStatus `protobuf:"varint,24,opt,name=status,proto3,enum=OrderStatus" json:"status,omitempty"`
	Message               string      `protobuf:"bytes,25,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{9}
}

func (x *Order) GetClientOrderRequestID() string {
	if x != nil {
		return x.ClientOrderRequestID
	}
	return ""
}

func (x *Order) GetClientAccount() string {
	if x != nil {
		return x.ClientAccount
	}
	return ""
}

func (x *Order) GetClientTag() string {
	if x != nil {
		return x.ClientTag
	}
	return ""
}

func (x *Order) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *Order) GetPistonClientOrderID() string {
	if x != nil {
		return x.PistonClientOrderID
	}
	return ""
}

func (x *Order) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *Order) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *Order) GetExchangeAccount() string {
	if x != nil {
		return x.ExchangeAccount
	}
	return ""
}

func (x *Order) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *Order) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *Order) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN_TYPE
}

func (x *Order) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Order) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Order) GetRemainingSize() float64 {
	if x != nil {
		return x.RemainingSize
	}
	return 0
}

func (x *Order) GetFilled() float64 {
	if x != nil {
		return x.Filled
	}
	return 0
}

func (x *Order) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *Order) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *Order) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *Order) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Order) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *Order) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *Order) GetAggrSide() AggrSide {
	if x != nil {
		return x.AggrSide
	}
	return AggrSide_MAKER
}

func (x *Order) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Order) GetStatus() OrderStatus {
	if x != nil {
		return x.Status
	}
	return OrderStatus_NONE
}

func (x *Order) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type InstrumentsDetailsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstrumentsDetailsRequest) Reset() {
	*x = InstrumentsDetailsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentsDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentsDetailsRequest) ProtoMessage() {}

func (x *InstrumentsDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentsDetailsRequest.ProtoReflect.Descriptor instead.
func (*InstrumentsDetailsRequest) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{10}
}

type InstrumentsDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstrumentsDetails []*InstrumentDetails `protobuf:"bytes,1,rep,name=instruments_details,json=instrumentsDetails,proto3" json:"instruments_details,omitempty"`
}

func (x *InstrumentsDetails) Reset() {
	*x = InstrumentsDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentsDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentsDetails) ProtoMessage() {}

func (x *InstrumentsDetails) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentsDetails.ProtoReflect.Descriptor instead.
func (*InstrumentsDetails) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{11}
}

func (x *InstrumentsDetails) GetInstrumentsDetails() []*InstrumentDetails {
	if x != nil {
		return x.InstrumentsDetails
	}
	return nil
}

type InstrumentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instrument string  `protobuf:"bytes,1,opt,name=instrument,proto3" json:"instrument,omitempty"`
	MinLot     float64 `protobuf:"fixed64,2,opt,name=minLot,proto3" json:"minLot,omitempty"`
}

func (x *InstrumentDetails) Reset() {
	*x = InstrumentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstrumentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstrumentDetails) ProtoMessage() {}

func (x *InstrumentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstrumentDetails.ProtoReflect.Descriptor instead.
func (*InstrumentDetails) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{12}
}

func (x *InstrumentDetails) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *InstrumentDetails) GetMinLot() float64 {
	if x != nil {
		return x.MinLot
	}
	return 0
}

type OpenOrdersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID int64 `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
}

func (x *OpenOrdersRequest) Reset() {
	*x = OpenOrdersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrdersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrdersRequest) ProtoMessage() {}

func (x *OpenOrdersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrdersRequest.ProtoReflect.Descriptor instead.
func (*OpenOrdersRequest) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{13}
}

func (x *OpenOrdersRequest) GetRequestID() int64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

type OpenOrdersRequestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestID int64        `protobuf:"varint,1,opt,name=requestID,proto3" json:"requestID,omitempty"`
	Orders    []*OpenOrder `protobuf:"bytes,2,rep,name=orders,proto3" json:"orders,omitempty"`
}

func (x *OpenOrdersRequestResult) Reset() {
	*x = OpenOrdersRequestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrdersRequestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrdersRequestResult) ProtoMessage() {}

func (x *OpenOrdersRequestResult) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrdersRequestResult.ProtoReflect.Descriptor instead.
func (*OpenOrdersRequestResult) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{14}
}

func (x *OpenOrdersRequestResult) GetRequestID() int64 {
	if x != nil {
		return x.RequestID
	}
	return 0
}

func (x *OpenOrdersRequestResult) GetOrders() []*OpenOrder {
	if x != nil {
		return x.Orders
	}
	return nil
}

type OpenOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeID            string    `protobuf:"bytes,1,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	PistonClientOrderID   string    `protobuf:"bytes,2,opt,name=PistonClientOrderID,proto3" json:"PistonClientOrderID,omitempty"`
	ExchangeClientOrderID string    `protobuf:"bytes,3,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Exchange              string    `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Side                  OrderSide `protobuf:"varint,5,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Instrument            string    `protobuf:"bytes,6,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Type                  OrderType `protobuf:"varint,7,opt,name=type,proto3,enum=OrderType" json:"type,omitempty"`
	Size                  float64   `protobuf:"fixed64,8,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64   `protobuf:"fixed64,9,opt,name=price,proto3" json:"price,omitempty"`
	RemainingSize         float64   `protobuf:"fixed64,10,opt,name=remainingSize,proto3" json:"remainingSize,omitempty"`
	Created               int64     `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
	LastUpdated           int64     `protobuf:"varint,12,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
}

func (x *OpenOrder) Reset() {
	*x = OpenOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenOrder) ProtoMessage() {}

func (x *OpenOrder) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenOrder.ProtoReflect.Descriptor instead.
func (*OpenOrder) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{15}
}

func (x *OpenOrder) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OpenOrder) GetPistonClientOrderID() string {
	if x != nil {
		return x.PistonClientOrderID
	}
	return ""
}

func (x *OpenOrder) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *OpenOrder) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OpenOrder) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *OpenOrder) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *OpenOrder) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN_TYPE
}

func (x *OpenOrder) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OpenOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OpenOrder) GetRemainingSize() float64 {
	if x != nil {
		return x.RemainingSize
	}
	return 0
}

func (x *OpenOrder) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *OpenOrder) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type AddOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID string    `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID       string    `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	Instrument     string    `protobuf:"bytes,3,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Side           OrderSide `protobuf:"varint,4,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Type           OrderType `protobuf:"varint,5,opt,name=type,proto3,enum=OrderType" json:"type,omitempty"`
	Size           float64   `protobuf:"fixed64,6,opt,name=size,proto3" json:"size,omitempty"`
	Price          float64   `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Created        int64     `protobuf:"varint,101,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *AddOrder) Reset() {
	*x = AddOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddOrder) ProtoMessage() {}

func (x *AddOrder) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddOrder.ProtoReflect.Descriptor instead.
func (*AddOrder) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{16}
}

func (x *AddOrder) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *AddOrder) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *AddOrder) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *AddOrder) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *AddOrder) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN_TYPE
}

func (x *AddOrder) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *AddOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *AddOrder) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type OrderAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string    `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string    `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	Exchange              string    `protobuf:"bytes,3,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExchangeID            string    `protobuf:"bytes,4,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string    `protobuf:"bytes,5,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Instrument            string    `protobuf:"bytes,6,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Side                  OrderSide `protobuf:"varint,7,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Type                  OrderType `protobuf:"varint,8,opt,name=type,proto3,enum=OrderType" json:"type,omitempty"`
	Size                  float64   `protobuf:"fixed64,9,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64   `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	LastUpdated           int64     `protobuf:"varint,101,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
}

func (x *OrderAdded) Reset() {
	*x = OrderAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAdded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAdded) ProtoMessage() {}

func (x *OrderAdded) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAdded.ProtoReflect.Descriptor instead.
func (*OrderAdded) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{17}
}

func (x *OrderAdded) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderAdded) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderAdded) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderAdded) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderAdded) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *OrderAdded) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *OrderAdded) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *OrderAdded) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN_TYPE
}

func (x *OrderAdded) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderAdded) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderAdded) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

type OrderAddRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,3,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
}

func (x *OrderAddRejected) Reset() {
	*x = OrderAddRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAddRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAddRejected) ProtoMessage() {}

func (x *OrderAddRejected) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAddRejected.ProtoReflect.Descriptor instead.
func (*OrderAddRejected) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{18}
}

func (x *OrderAddRejected) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderAddRejected) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderAddRejected) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

type MoveOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string    `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string    `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string    `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string    `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Exchange              string    `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Instrument            string    `protobuf:"bytes,6,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Side                  OrderSide `protobuf:"varint,7,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Type                  OrderType `protobuf:"varint,8,opt,name=type,proto3,enum=OrderType" json:"type,omitempty"`
	Size                  float64   `protobuf:"fixed64,9,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64   `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	Created               int64     `protobuf:"varint,11,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *MoveOrder) Reset() {
	*x = MoveOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoveOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoveOrder) ProtoMessage() {}

func (x *MoveOrder) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoveOrder.ProtoReflect.Descriptor instead.
func (*MoveOrder) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{19}
}

func (x *MoveOrder) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *MoveOrder) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *MoveOrder) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *MoveOrder) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *MoveOrder) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *MoveOrder) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *MoveOrder) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *MoveOrder) GetType() OrderType {
	if x != nil {
		return x.Type
	}
	return OrderType_UNKNOWN_TYPE
}

func (x *MoveOrder) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *MoveOrder) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MoveOrder) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type OrderMoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string  `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string  `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string  `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string  `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Exchange              string  `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	Size                  float64 `protobuf:"fixed64,6,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64 `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	Created               int64   `protobuf:"varint,101,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *OrderMoved) Reset() {
	*x = OrderMoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMoved) ProtoMessage() {}

func (x *OrderMoved) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMoved.ProtoReflect.Descriptor instead.
func (*OrderMoved) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{20}
}

func (x *OrderMoved) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderMoved) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderMoved) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderMoved) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *OrderMoved) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderMoved) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderMoved) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderMoved) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

type OrderMoveRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
}

func (x *OrderMoveRejected) Reset() {
	*x = OrderMoveRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderMoveRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderMoveRejected) ProtoMessage() {}

func (x *OrderMoveRejected) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderMoveRejected.ProtoReflect.Descriptor instead.
func (*OrderMoveRejected) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{21}
}

func (x *OrderMoveRejected) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderMoveRejected) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderMoveRejected) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderMoveRejected) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

type CancelOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Instrument            string `protobuf:"bytes,5,opt,name=instrument,proto3" json:"instrument,omitempty"`
}

func (x *CancelOrder) Reset() {
	*x = CancelOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelOrder) ProtoMessage() {}

func (x *CancelOrder) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelOrder.ProtoReflect.Descriptor instead.
func (*CancelOrder) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{22}
}

func (x *CancelOrder) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *CancelOrder) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *CancelOrder) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *CancelOrder) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *CancelOrder) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

type OrderCancelled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
}

func (x *OrderCancelled) Reset() {
	*x = OrderCancelled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancelled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancelled) ProtoMessage() {}

func (x *OrderCancelled) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancelled.ProtoReflect.Descriptor instead.
func (*OrderCancelled) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{23}
}

func (x *OrderCancelled) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderCancelled) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderCancelled) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderCancelled) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

type OrderCancelRejected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
}

func (x *OrderCancelRejected) Reset() {
	*x = OrderCancelRejected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderCancelRejected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderCancelRejected) ProtoMessage() {}

func (x *OrderCancelRejected) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderCancelRejected.ProtoReflect.Descriptor instead.
func (*OrderCancelRejected) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{24}
}

func (x *OrderCancelRejected) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderCancelRejected) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderCancelRejected) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderCancelRejected) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

type OrderFilled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string    `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string    `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string    `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string    `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
	Exchange              string    `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"`
	TradeID               string    `protobuf:"bytes,6,opt,name=tradeID,proto3" json:"tradeID,omitempty"`
	Side                  OrderSide `protobuf:"varint,7,opt,name=side,proto3,enum=OrderSide" json:"side,omitempty"`
	Instrument            string    `protobuf:"bytes,8,opt,name=instrument,proto3" json:"instrument,omitempty"`
	Size                  float64   `protobuf:"fixed64,9,opt,name=size,proto3" json:"size,omitempty"`
	Price                 float64   `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`
	Fee                   float64   `protobuf:"fixed64,11,opt,name=fee,proto3" json:"fee,omitempty"`
	FeeCurrency           string    `protobuf:"bytes,12,opt,name=feeCurrency,proto3" json:"feeCurrency,omitempty"`
	Market                string    `protobuf:"bytes,13,opt,name=market,proto3" json:"market,omitempty"`
	Timestamp             int64     `protobuf:"varint,101,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OrderFilled) Reset() {
	*x = OrderFilled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFilled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFilled) ProtoMessage() {}

func (x *OrderFilled) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFilled.ProtoReflect.Descriptor instead.
func (*OrderFilled) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{25}
}

func (x *OrderFilled) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderFilled) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderFilled) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderFilled) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

func (x *OrderFilled) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *OrderFilled) GetTradeID() string {
	if x != nil {
		return x.TradeID
	}
	return ""
}

func (x *OrderFilled) GetSide() OrderSide {
	if x != nil {
		return x.Side
	}
	return OrderSide_UNKNOWN
}

func (x *OrderFilled) GetInstrument() string {
	if x != nil {
		return x.Instrument
	}
	return ""
}

func (x *OrderFilled) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *OrderFilled) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderFilled) GetFee() float64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *OrderFilled) GetFeeCurrency() string {
	if x != nil {
		return x.FeeCurrency
	}
	return ""
}

func (x *OrderFilled) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *OrderFilled) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type OrderExecuted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderRequestID        string `protobuf:"bytes,1,opt,name=orderRequestID,proto3" json:"orderRequestID,omitempty"`
	PistonID              string `protobuf:"bytes,2,opt,name=PistonID,proto3" json:"PistonID,omitempty"`
	ExchangeID            string `protobuf:"bytes,3,opt,name=exchangeID,proto3" json:"exchangeID,omitempty"`
	ExchangeClientOrderID string `protobuf:"bytes,4,opt,name=exchangeClientOrderID,proto3" json:"exchangeClientOrderID,omitempty"`
}

func (x *OrderExecuted) Reset() {
	*x = OrderExecuted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderExecuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderExecuted) ProtoMessage() {}

func (x *OrderExecuted) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderExecuted.ProtoReflect.Descriptor instead.
func (*OrderExecuted) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{26}
}

func (x *OrderExecuted) GetOrderRequestID() string {
	if x != nil {
		return x.OrderRequestID
	}
	return ""
}

func (x *OrderExecuted) GetPistonID() string {
	if x != nil {
		return x.PistonID
	}
	return ""
}

func (x *OrderExecuted) GetExchangeID() string {
	if x != nil {
		return x.ExchangeID
	}
	return ""
}

func (x *OrderExecuted) GetExchangeClientOrderID() string {
	if x != nil {
		return x.ExchangeClientOrderID
	}
	return ""
}

type CancelAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CancelAll) Reset() {
	*x = CancelAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAll) ProtoMessage() {}

func (x *CancelAll) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAll.ProtoReflect.Descriptor instead.
func (*CancelAll) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{27}
}

type ExchangeBalances struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange        string             `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`
	ExchangeAccount string             `protobuf:"bytes,2,opt,name=exchangeAccount,proto3" json:"exchangeAccount,omitempty"`
	Balances        map[string]float64 `protobuf:"bytes,3,rep,name=balances,proto3" json:"balances,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Timestamp       int64              `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ExchangeBalances) Reset() {
	*x = ExchangeBalances{}
	if protoimpl.UnsafeEnabled {
		mi := &file_piston_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeBalances) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeBalances) ProtoMessage() {}

func (x *ExchangeBalances) ProtoReflect() protoreflect.Message {
	mi := &file_piston_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeBalances.ProtoReflect.Descriptor instead.
func (*ExchangeBalances) Descriptor() ([]byte, []int) {
	return file_piston_proto_rawDescGZIP(), []int{28}
}

func (x *ExchangeBalances) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *ExchangeBalances) GetExchangeAccount() string {
	if x != nil {
		return x.ExchangeAccount
	}
	return ""
}

func (x *ExchangeBalances) GetBalances() map[string]float64 {
	if x != nil {
		return x.Balances
	}
	return nil
}

func (x *ExchangeBalances) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

var File_piston_proto protoreflect.FileDescriptor

var file_piston_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x34,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6b, 0x22, 0xbf, 0x01, 0x0a, 0x11,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64,
	0x4d, 0x73, 0x67, 0x22, 0xf0, 0x08, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x66, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x6a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x11,
	0x6f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x6f,
	0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3f, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63,
	0x65, 0x65, 0x64, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x6d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x19, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a,
	0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x79, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x61, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x10,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x7b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a,
	0x09, 0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x09,
	0x6d, 0x6f, 0x76, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x0a, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x7d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x42, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x7e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x0b,
	0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x7f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x3a,
	0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x18, 0x80, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x49, 0x0a, 0x13, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x13, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x64, 0x12, 0x2b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c,
	0x6c, 0x48, 0x00, 0x52, 0x09, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x42, 0x06,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x26,
	0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x62, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x62, 0x69, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x35, 0x0a, 0x09, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x87, 0x01,
	0x0a, 0x0b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x3b, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x26, 0x0a, 0x08,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x52, 0x08, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x22, 0xb6, 0x06, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x32,
	0x0a, 0x14, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x65, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x65,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x08, 0x61, 0x67, 0x67, 0x72, 0x53, 0x69, 0x64, 0x65,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x08, 0x61, 0x67, 0x67, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1b, 0x0a,
	0x19, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x59, 0x0a, 0x12, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x43, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x12, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x4b, 0x0a, 0x11, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69,
	0x6e, 0x4c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x4c,
	0x6f, 0x74, 0x22, 0x31, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x22, 0x5b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x06, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x22, 0x9b, 0x03, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x30, 0x0a, 0x13, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x50,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04,
	0x73, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x22, 0xf2, 0x01, 0x0a, 0x08, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xee, 0x02, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xe5, 0x02, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x86, 0x02,
	0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xad, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44,
	0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xc7, 0x01, 0x0a, 0x0b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0xaa, 0x01, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22, 0xaf, 0x01,
	0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22,
	0xb1, 0x03, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x69, 0x73, 0x74, 0x6f,
	0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x65, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0xa9, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x22,
	0x0b, 0x0a, 0x09, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x22, 0xf0, 0x01, 0x0a,
	0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a,
	0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2e, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x2a, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x49, 0x44,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x53, 0x4b, 0x10, 0x02, 0x2a, 0x20, 0x0a, 0x08, 0x41,
	0x67, 0x67, 0x72, 0x53, 0x69, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4b, 0x45, 0x52,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x01, 0x2a, 0x81, 0x01,
	0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x09, 0x0a,
	0x05, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x4f, 0x53, 0x54,
	0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x52, 0x4b, 0x45,
	0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x46, 0x4f, 0x4b,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x49, 0x4f, 0x43, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x46, 0x4f, 0x4b, 0x10,
	0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x41, 0x52, 0x4b, 0x45, 0x54, 0x5f, 0x49, 0x4f, 0x43, 0x10,
	0x07, 0x2a, 0xca, 0x01, 0x0a, 0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4e,
	0x45, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x45, 0x4e, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f,
	0x56, 0x45, 0x44, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x49, 0x4c, 0x4c, 0x10, 0x08, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x4a,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x52,
	0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x0c, 0x2a, 0x3c,
	0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x73, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4b, 0x10, 0x03, 0x2a, 0xf6, 0x04, 0x0a,
	0x12, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x08, 0x12,
	0x1d, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x10, 0x09, 0x12, 0x1e,
	0x0a, 0x1a, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x0a, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x16, 0x12, 0x1c, 0x0a, 0x18, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x41, 0x64, 0x64, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x6f, 0x76,
	0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x18, 0x12,
	0x16, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x19, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x10, 0x1a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x1b, 0x12, 0x1a,
	0x0a, 0x16, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x1d, 0x12, 0x17, 0x0a, 0x13, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x10, 0x20, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x10, 0x21, 0x32, 0x8b, 0x01, 0x0a, 0x06, 0x50, 0x69, 0x73, 0x74, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x4d, 0x44, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x12, 0x12, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x64, 0x61, 0x74,
	0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x64, 0x61, 0x74, 0x61, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x3f, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0f, 0x2e, 0x54, 0x72,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x70, 0x69, 0x73, 0x74, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_piston_proto_rawDescOnce sync.Once
	file_piston_proto_rawDescData = file_piston_proto_rawDesc
)

func file_piston_proto_rawDescGZIP() []byte {
	file_piston_proto_rawDescOnce.Do(func() {
		file_piston_proto_rawDescData = protoimpl.X.CompressGZIP(file_piston_proto_rawDescData)
	})
	return file_piston_proto_rawDescData
}

var file_piston_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_piston_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_piston_proto_goTypes = []interface{}{
	(OrderSide)(0),                    // 0: OrderSide
	(AggrSide)(0),                     // 1: AggrSide
	(OrderType)(0),                    // 2: OrderType
	(OrderStatus)(0),                  // 3: OrderStatus
	(MarketdataMsgType)(0),            // 4: MarketdataMsgType
	(TradingMessageType)(0),           // 5: TradingMessageType
	(*SubscribeMessage)(nil),          // 6: SubscribeMessage
	(*BookMessage)(nil),               // 7: BookMessage
	(*MarketdataMessage)(nil),         // 8: MarketdataMessage
	(*RateLimitExceedMsg)(nil),        // 9: RateLimitExceedMsg
	(*TradingMessage)(nil),            // 10: TradingMessage
	(*OrderBook)(nil),                 // 11: OrderBook
	(*LevelInfo)(nil),                 // 12: LevelInfo
	(*LevelUpdate)(nil),               // 13: LevelUpdate
	(*OrderBookSnapshot)(nil),         // 14: OrderBookSnapshot
	(*Order)(nil),                     // 15: Order
	(*InstrumentsDetailsRequest)(nil), // 16: InstrumentsDetailsRequest
	(*InstrumentsDetails)(nil),        // 17: InstrumentsDetails
	(*InstrumentDetails)(nil),         // 18: InstrumentDetails
	(*OpenOrdersRequest)(nil),         // 19: OpenOrdersRequest
	(*OpenOrdersRequestResult)(nil),   // 20: OpenOrdersRequestResult
	(*OpenOrder)(nil),                 // 21: OpenOrder
	(*AddOrder)(nil),                  // 22: AddOrder
	(*OrderAdded)(nil),                // 23: OrderAdded
	(*OrderAddRejected)(nil),          // 24: OrderAddRejected
	(*MoveOrder)(nil),                 // 25: MoveOrder
	(*OrderMoved)(nil),                // 26: OrderMoved
	(*OrderMoveRejected)(nil),         // 27: OrderMoveRejected
	(*CancelOrder)(nil),               // 28: CancelOrder
	(*OrderCancelled)(nil),            // 29: OrderCancelled
	(*OrderCancelRejected)(nil),       // 30: OrderCancelRejected
	(*OrderFilled)(nil),               // 31: OrderFilled
	(*OrderExecuted)(nil),             // 32: OrderExecuted
	(*CancelAll)(nil),                 // 33: CancelAll
	(*ExchangeBalances)(nil),          // 34: ExchangeBalances
	nil,                               // 35: ExchangeBalances.BalancesEntry
}
var file_piston_proto_depIdxs = []int32{
	14, // 0: BookMessage.book:type_name -> OrderBookSnapshot
	4,  // 1: MarketdataMessage.msgType:type_name -> MarketdataMsgType
	6,  // 2: MarketdataMessage.subscribeMessage:type_name -> SubscribeMessage
	7,  // 3: MarketdataMessage.bookMessage:type_name -> BookMessage
	5,  // 4: TradingMessage.type:type_name -> TradingMessageType
	34, // 5: TradingMessage.balances:type_name -> ExchangeBalances
	20, // 6: TradingMessage.openOrders:type_name -> OpenOrdersRequestResult
	19, // 7: TradingMessage.openOrdersRequest:type_name -> OpenOrdersRequest
	9,  // 8: TradingMessage.rateLimitExceed:type_name -> RateLimitExceedMsg
	16, // 9: TradingMessage.instrumentsDetailsRequest:type_name -> InstrumentsDetailsRequest
	17, // 10: TradingMessage.instrumentsDetailsResponse:type_name -> InstrumentsDetails
	22, // 11: TradingMessage.addOrder:type_name -> AddOrder
	23, // 12: TradingMessage.orderAdded:type_name -> OrderAdded
	24, // 13: TradingMessage.orderAddRejected:type_name -> OrderAddRejected
	25, // 14: TradingMessage.moveOrder:type_name -> MoveOrder
	26, // 15: TradingMessage.orderMoved:type_name -> OrderMoved
	27, // 16: TradingMessage.orderMoveRejected:type_name -> OrderMoveRejected
	28, // 17: TradingMessage.cancelOrder:type_name -> CancelOrder
	29, // 18: TradingMessage.orderCancelled:type_name -> OrderCancelled
	30, // 19: TradingMessage.orderCancelRejected:type_name -> OrderCancelRejected
	31, // 20: TradingMessage.orderFilled:type_name -> OrderFilled
	32, // 21: TradingMessage.orderExecuted:type_name -> OrderExecuted
	33, // 22: TradingMessage.cancelAll:type_name -> CancelAll
	12, // 23: OrderBook.bids:type_name -> LevelInfo
	12, // 24: OrderBook.asks:type_name -> LevelInfo
	12, // 25: LevelUpdate.info:type_name -> LevelInfo
	11, // 26: OrderBookSnapshot.snapshot:type_name -> OrderBook
	0,  // 27: Order.side:type_name -> OrderSide
	2,  // 28: Order.type:type_name -> OrderType
	1,  // 29: Order.aggrSide:type_name -> AggrSide
	3,  // 30: Order.status:type_name -> OrderStatus
	18, // 31: InstrumentsDetails.instruments_details:type_name -> InstrumentDetails
	21, // 32: OpenOrdersRequestResult.orders:type_name -> OpenOrder
	0,  // 33: OpenOrder.side:type_name -> OrderSide
	2,  // 34: OpenOrder.type:type_name -> OrderType
	0,  // 35: AddOrder.side:type_name -> OrderSide
	2,  // 36: AddOrder.type:type_name -> OrderType
	0,  // 37: OrderAdded.side:type_name -> OrderSide
	2,  // 38: OrderAdded.type:type_name -> OrderType
	0,  // 39: MoveOrder.side:type_name -> OrderSide
	2,  // 40: MoveOrder.type:type_name -> OrderType
	0,  // 41: OrderFilled.side:type_name -> OrderSide
	35, // 42: ExchangeBalances.balances:type_name -> ExchangeBalances.BalancesEntry
	8,  // 43: Piston.ConnectMDGateway:input_type -> MarketdataMessage
	10, // 44: Piston.ConnectTradingGateway:input_type -> TradingMessage
	8,  // 45: Piston.ConnectMDGateway:output_type -> MarketdataMessage
	10, // 46: Piston.ConnectTradingGateway:output_type -> TradingMessage
	45, // [45:47] is the sub-list for method output_type
	43, // [43:45] is the sub-list for method input_type
	43, // [43:43] is the sub-list for extension type_name
	43, // [43:43] is the sub-list for extension extendee
	0,  // [0:43] is the sub-list for field type_name
}

func init() { file_piston_proto_init() }
func file_piston_proto_init() {
	if File_piston_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_piston_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarketdataMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RateLimitExceedMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderBookSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentsDetailsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentsDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstrumentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrdersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrdersRequestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAddRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoveOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderMoveRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancelled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderCancelRejected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFilled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderExecuted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_piston_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeBalances); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_piston_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*MarketdataMessage_SubscribeMessage)(nil),
		(*MarketdataMessage_BookMessage)(nil),
	}
	file_piston_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TradingMessage_Balances)(nil),
		(*TradingMessage_OpenOrders)(nil),
		(*TradingMessage_OpenOrdersRequest)(nil),
		(*TradingMessage_RateLimitExceed)(nil),
		(*TradingMessage_InstrumentsDetailsRequest)(nil),
		(*TradingMessage_InstrumentsDetailsResponse)(nil),
		(*TradingMessage_AddOrder)(nil),
		(*TradingMessage_OrderAdded)(nil),
		(*TradingMessage_OrderAddRejected)(nil),
		(*TradingMessage_MoveOrder)(nil),
		(*TradingMessage_OrderMoved)(nil),
		(*TradingMessage_OrderMoveRejected)(nil),
		(*TradingMessage_CancelOrder)(nil),
		(*TradingMessage_OrderCancelled)(nil),
		(*TradingMessage_OrderCancelRejected)(nil),
		(*TradingMessage_OrderFilled)(nil),
		(*TradingMessage_OrderExecuted)(nil),
		(*TradingMessage_CancelAll)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_piston_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_piston_proto_goTypes,
		DependencyIndexes: file_piston_proto_depIdxs,
		EnumInfos:         file_piston_proto_enumTypes,
		MessageInfos:      file_piston_proto_msgTypes,
	}.Build()
	File_piston_proto = out.File
	file_piston_proto_rawDesc = nil
	file_piston_proto_goTypes = nil
	file_piston_proto_depIdxs = nil
}
