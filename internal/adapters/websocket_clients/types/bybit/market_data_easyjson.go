// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bybit

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(in *jlexer.Lexer, out *OrderBookUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "topic":
			out.Topic = string(in.String())
		case "type":
			out.Type = OpType(in.String())
		case "ts":
			out.TS = int64(in.Int64())
		case "data":
			(out.DataMD).UnmarshalEasyJSON(in)
		case "cts":
			out.CTS = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(out *jwriter.Writer, in OrderBookUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix[1:])
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.Int64(int64(in.TS))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		(in.DataMD).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"cts\":"
		out.RawString(prefix)
		out.Int64(int64(in.CTS))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderBookUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderBookUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderBookUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderBookUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(l, v)
}
func easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(in *jlexer.Lexer, out *MDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "ret_msg":
			out.RetMsg = string(in.String())
		case "conn_id":
			out.ConnID = string(in.String())
		case "op":
			out.Op = OpType(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(out *jwriter.Writer, in MDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"ret_msg\":"
		out.RawString(prefix)
		out.String(string(in.RetMsg))
	}
	{
		const prefix string = ",\"conn_id\":"
		out.RawString(prefix)
		out.String(string(in.ConnID))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(l, v)
}
func easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(in *jlexer.Lexer, out *MDRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = OpType(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]string, 0, 4)
					} else {
						out.Args = []string{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.Args = append(out.Args, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(out *jwriter.Writer, in MDRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Args {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MDRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MDRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MDRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MDRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(l, v)
}
func easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(in *jlexer.Lexer, out *DataMD) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "s":
			out.Symbol = string(in.String())
		case "b":
			if in.IsNull() {
				in.Skip()
				out.Bids = nil
			} else {
				in.Delim('[')
				if out.Bids == nil {
					if !in.IsDelim(']') {
						out.Bids = make([][]string, 0, 2)
					} else {
						out.Bids = [][]string{}
					}
				} else {
					out.Bids = (out.Bids)[:0]
				}
				for !in.IsDelim(']') {
					var v4 []string
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						in.Delim('[')
						if v4 == nil {
							if !in.IsDelim(']') {
								v4 = make([]string, 0, 4)
							} else {
								v4 = []string{}
							}
						} else {
							v4 = (v4)[:0]
						}
						for !in.IsDelim(']') {
							var v5 string
							v5 = string(in.String())
							v4 = append(v4, v5)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Bids = append(out.Bids, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "a":
			if in.IsNull() {
				in.Skip()
				out.Asks = nil
			} else {
				in.Delim('[')
				if out.Asks == nil {
					if !in.IsDelim(']') {
						out.Asks = make([][]string, 0, 2)
					} else {
						out.Asks = [][]string{}
					}
				} else {
					out.Asks = (out.Asks)[:0]
				}
				for !in.IsDelim(']') {
					var v6 []string
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						in.Delim('[')
						if v6 == nil {
							if !in.IsDelim(']') {
								v6 = make([]string, 0, 4)
							} else {
								v6 = []string{}
							}
						} else {
							v6 = (v6)[:0]
						}
						for !in.IsDelim(']') {
							var v7 string
							v7 = string(in.String())
							v6 = append(v6, v7)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Asks = append(out.Asks, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "u":
			out.Update = int64(in.Int64())
		case "seq":
			out.Seq = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(out *jwriter.Writer, in DataMD) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"s\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"b\":"
		out.RawString(prefix)
		if in.Bids == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Bids {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v10, v11 := range v9 {
						if v10 > 0 {
							out.RawByte(',')
						}
						out.String(string(v11))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"a\":"
		out.RawString(prefix)
		if in.Asks == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.Asks {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v14, v15 := range v13 {
						if v14 > 0 {
							out.RawByte(',')
						}
						out.String(string(v15))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"u\":"
		out.RawString(prefix)
		out.Int64(int64(in.Update))
	}
	{
		const prefix string = ",\"seq\":"
		out.RawString(prefix)
		out.Int64(int64(in.Seq))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DataMD) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DataMD) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE0009855EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DataMD) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DataMD) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE0009855DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(l, v)
}
