// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bybit

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(in *jlexer.Lexer, out *SubscriptionMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = OpType(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]Topic, 0, 4)
					} else {
						out.Args = []Topic{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Topic
					v1 = Topic(in.String())
					out.Args = append(out.Args, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(out *jwriter.Writer, in SubscriptionMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Args {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubscriptionMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubscriptionMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubscriptionMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubscriptionMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(in *jlexer.Lexer, out *Response) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "success":
			out.Success = bool(in.Bool())
		case "ret_msg":
			out.RetMsg = string(in.String())
		case "op":
			out.Op = OpType(in.String())
		case "conn_id":
			out.ConnID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(out *jwriter.Writer, in Response) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"ret_msg\":"
		out.RawString(prefix)
		out.String(string(in.RetMsg))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"conn_id\":"
		out.RawString(prefix)
		out.String(string(in.ConnID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Response) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Response) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Response) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Response) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit1(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(in *jlexer.Lexer, out *OrderUpdate) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "topic":
			out.Topic = Topic(in.String())
		case "creationTime":
			out.CreationTime = int64(in.Int64())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]Data, 0, 0)
					} else {
						out.Data = []Data{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Data
					(v4).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "success":
			out.Success = bool(in.Bool())
		case "ret_msg":
			out.RetMsg = string(in.String())
		case "op":
			out.Op = OpType(in.String())
		case "conn_id":
			out.ConnID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(out *jwriter.Writer, in OrderUpdate) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"topic\":"
		out.RawString(prefix)
		out.String(string(in.Topic))
	}
	{
		const prefix string = ",\"creationTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.CreationTime))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.Bool(bool(in.Success))
	}
	{
		const prefix string = ",\"ret_msg\":"
		out.RawString(prefix)
		out.String(string(in.RetMsg))
	}
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix)
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"conn_id\":"
		out.RawString(prefix)
		out.String(string(in.ConnID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderUpdate) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderUpdate) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderUpdate) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderUpdate) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit2(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(in *jlexer.Lexer, out *HeartbeatMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(out *jwriter.Writer, in HeartbeatMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HeartbeatMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HeartbeatMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HeartbeatMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit3(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(in *jlexer.Lexer, out *Data) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "symbol":
			out.Symbol = string(in.String())
		case "orderId":
			out.OrderID = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "orderType":
			out.OrderType = string(in.String())
		case "cancelType":
			out.CancelType = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "orderIv":
			out.OrderIv = string(in.String())
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "orderStatus":
			out.OrderStatus = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		case "lastPriceOnCreated":
			out.LastPriceOnCreated = string(in.String())
		case "reduceOnly":
			out.ReduceOnly = bool(in.Bool())
		case "leavesQty":
			out.LeavesQty = string(in.String())
		case "leavesValue":
			out.LeavesValue = string(in.String())
		case "cumExecQty":
			out.CumExecQty = string(in.String())
		case "cumExecValue":
			out.CumExecValue = string(in.String())
		case "avgPrice":
			out.AvgPrice = string(in.String())
		case "blockTradeId":
			out.BlockTradeID = string(in.String())
		case "positionIdx":
			out.PositionIdx = int64(in.Int64())
		case "cumExecFee":
			out.CumExecFee = string(in.String())
		case "createdTime":
			out.CreatedTime = string(in.String())
		case "updatedTime":
			out.UpdatedTime = string(in.String())
		case "rejectReason":
			out.RejectReason = string(in.String())
		case "stopOrderType":
			out.StopOrderType = string(in.String())
		case "tpslMode":
			out.TpslMode = string(in.String())
		case "triggerPrice":
			out.TriggerPrice = string(in.String())
		case "takeProfit":
			out.TakeProfit = string(in.String())
		case "stopLoss":
			out.StopLoss = string(in.String())
		case "tpTriggerBy":
			out.TpTriggerBy = string(in.String())
		case "slTriggerBy":
			out.SlTriggerBy = string(in.String())
		case "tpLimitPrice":
			out.TpLimitPrice = string(in.String())
		case "slLimitPrice":
			out.SlLimitPrice = string(in.String())
		case "triggerDirection":
			out.TriggerDirection = int64(in.Int64())
		case "triggerBy":
			out.TriggerBy = string(in.String())
		case "closeOnTrigger":
			out.CloseOnTrigger = bool(in.Bool())
		case "category":
			out.Category = string(in.String())
		case "placeType":
			out.PlaceType = string(in.String())
		case "smpType":
			out.SMPType = string(in.String())
		case "smpGroup":
			out.SMPGroup = int64(in.Int64())
		case "smpOrderId":
			out.SMPOrderID = string(in.String())
		case "feeCurrency":
			out.FeeCurrency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(out *jwriter.Writer, in Data) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix[1:])
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"orderType\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"cancelType\":"
		out.RawString(prefix)
		out.String(string(in.CancelType))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"orderIv\":"
		out.RawString(prefix)
		out.String(string(in.OrderIv))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"orderStatus\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	{
		const prefix string = ",\"lastPriceOnCreated\":"
		out.RawString(prefix)
		out.String(string(in.LastPriceOnCreated))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.Bool(bool(in.ReduceOnly))
	}
	{
		const prefix string = ",\"leavesQty\":"
		out.RawString(prefix)
		out.String(string(in.LeavesQty))
	}
	{
		const prefix string = ",\"leavesValue\":"
		out.RawString(prefix)
		out.String(string(in.LeavesValue))
	}
	{
		const prefix string = ",\"cumExecQty\":"
		out.RawString(prefix)
		out.String(string(in.CumExecQty))
	}
	{
		const prefix string = ",\"cumExecValue\":"
		out.RawString(prefix)
		out.String(string(in.CumExecValue))
	}
	{
		const prefix string = ",\"avgPrice\":"
		out.RawString(prefix)
		out.String(string(in.AvgPrice))
	}
	{
		const prefix string = ",\"blockTradeId\":"
		out.RawString(prefix)
		out.String(string(in.BlockTradeID))
	}
	{
		const prefix string = ",\"positionIdx\":"
		out.RawString(prefix)
		out.Int64(int64(in.PositionIdx))
	}
	{
		const prefix string = ",\"cumExecFee\":"
		out.RawString(prefix)
		out.String(string(in.CumExecFee))
	}
	{
		const prefix string = ",\"createdTime\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTime))
	}
	{
		const prefix string = ",\"updatedTime\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedTime))
	}
	{
		const prefix string = ",\"rejectReason\":"
		out.RawString(prefix)
		out.String(string(in.RejectReason))
	}
	{
		const prefix string = ",\"stopOrderType\":"
		out.RawString(prefix)
		out.String(string(in.StopOrderType))
	}
	{
		const prefix string = ",\"tpslMode\":"
		out.RawString(prefix)
		out.String(string(in.TpslMode))
	}
	{
		const prefix string = ",\"triggerPrice\":"
		out.RawString(prefix)
		out.String(string(in.TriggerPrice))
	}
	{
		const prefix string = ",\"takeProfit\":"
		out.RawString(prefix)
		out.String(string(in.TakeProfit))
	}
	{
		const prefix string = ",\"stopLoss\":"
		out.RawString(prefix)
		out.String(string(in.StopLoss))
	}
	{
		const prefix string = ",\"tpTriggerBy\":"
		out.RawString(prefix)
		out.String(string(in.TpTriggerBy))
	}
	{
		const prefix string = ",\"slTriggerBy\":"
		out.RawString(prefix)
		out.String(string(in.SlTriggerBy))
	}
	{
		const prefix string = ",\"tpLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.TpLimitPrice))
	}
	{
		const prefix string = ",\"slLimitPrice\":"
		out.RawString(prefix)
		out.String(string(in.SlLimitPrice))
	}
	{
		const prefix string = ",\"triggerDirection\":"
		out.RawString(prefix)
		out.Int64(int64(in.TriggerDirection))
	}
	{
		const prefix string = ",\"triggerBy\":"
		out.RawString(prefix)
		out.String(string(in.TriggerBy))
	}
	{
		const prefix string = ",\"closeOnTrigger\":"
		out.RawString(prefix)
		out.Bool(bool(in.CloseOnTrigger))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"placeType\":"
		out.RawString(prefix)
		out.String(string(in.PlaceType))
	}
	{
		const prefix string = ",\"smpType\":"
		out.RawString(prefix)
		out.String(string(in.SMPType))
	}
	{
		const prefix string = ",\"smpGroup\":"
		out.RawString(prefix)
		out.Int64(int64(in.SMPGroup))
	}
	{
		const prefix string = ",\"smpOrderId\":"
		out.RawString(prefix)
		out.String(string(in.SMPOrderID))
	}
	{
		const prefix string = ",\"feeCurrency\":"
		out.RawString(prefix)
		out.String(string(in.FeeCurrency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Data) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Data) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Data) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Data) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit4(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(in *jlexer.Lexer, out *AuthMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "op":
			out.Op = OpType(in.String())
		case "args":
			if in.IsNull() {
				in.Skip()
				out.Args = nil
			} else {
				in.Delim('[')
				if out.Args == nil {
					if !in.IsDelim(']') {
						out.Args = make([]interface{}, 0, 4)
					} else {
						out.Args = []interface{}{}
					}
				} else {
					out.Args = (out.Args)[:0]
				}
				for !in.IsDelim(']') {
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					out.Args = append(out.Args, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(out *jwriter.Writer, in AuthMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"op\":"
		out.RawString(prefix[1:])
		out.String(string(in.Op))
	}
	{
		const prefix string = ",\"args\":"
		out.RawString(prefix)
		if in.Args == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Args {
				if v8 > 0 {
					out.RawByte(',')
				}
				if m, ok := v9.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v9.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v9))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AuthMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AuthMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AuthMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AuthMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersWebsocketClientsTypesBybit5(l, v)
}
