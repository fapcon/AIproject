// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bybit

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(in *jlexer.Lexer, out *OrderHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(out *jwriter.Writer, in OrderHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(l, v)
}
func easyjson9d6b4be7Decode1(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode1(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson9d6b4be7Decode(in *jlexer.Lexer, out *struct {
	List []struct {
		OrderID      string `json:"orderId"`
		OrderLinkID  string `json:"orderLinkId"`
		BlockTradeID string `json:"blockTradeId"`
		Symbol       string `json:"symbol"`
		Price        string `json:"price"`
		Qty          string `json:"qty"`
		Side         string `json:"side"`
		PlaceType    string `json:"placeType"`
		OrderType    string `json:"orderType"`
		OrderStatus  string `json:"orderStatus"`
		AvgPrice     string `json:"avgPrice"`
		LeavesQty    string `json:"leavesQty"`
		CumExecQty   string `json:"cumExecQty"`
		CumExecFee   string `json:"cumExecFee"`
		CreatedTime  string `json:"createdTime"`
		UpdatedTime  string `json:"updatedTime"`
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"`
	Category       string `json:"category"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]struct {
							OrderID      string `json:"orderId"`
							OrderLinkID  string `json:"orderLinkId"`
							BlockTradeID string `json:"blockTradeId"`
							Symbol       string `json:"symbol"`
							Price        string `json:"price"`
							Qty          string `json:"qty"`
							Side         string `json:"side"`
							PlaceType    string `json:"placeType"`
							OrderType    string `json:"orderType"`
							OrderStatus  string `json:"orderStatus"`
							AvgPrice     string `json:"avgPrice"`
							LeavesQty    string `json:"leavesQty"`
							CumExecQty   string `json:"cumExecQty"`
							CumExecFee   string `json:"cumExecFee"`
							CreatedTime  string `json:"createdTime"`
							UpdatedTime  string `json:"updatedTime"`
						}, 0, 0)
					} else {
						out.List = []struct {
							OrderID      string `json:"orderId"`
							OrderLinkID  string `json:"orderLinkId"`
							BlockTradeID string `json:"blockTradeId"`
							Symbol       string `json:"symbol"`
							Price        string `json:"price"`
							Qty          string `json:"qty"`
							Side         string `json:"side"`
							PlaceType    string `json:"placeType"`
							OrderType    string `json:"orderType"`
							OrderStatus  string `json:"orderStatus"`
							AvgPrice     string `json:"avgPrice"`
							LeavesQty    string `json:"leavesQty"`
							CumExecQty   string `json:"cumExecQty"`
							CumExecFee   string `json:"cumExecFee"`
							CreatedTime  string `json:"createdTime"`
							UpdatedTime  string `json:"updatedTime"`
						}{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						OrderID      string `json:"orderId"`
						OrderLinkID  string `json:"orderLinkId"`
						BlockTradeID string `json:"blockTradeId"`
						Symbol       string `json:"symbol"`
						Price        string `json:"price"`
						Qty          string `json:"qty"`
						Side         string `json:"side"`
						PlaceType    string `json:"placeType"`
						OrderType    string `json:"orderType"`
						OrderStatus  string `json:"orderStatus"`
						AvgPrice     string `json:"avgPrice"`
						LeavesQty    string `json:"leavesQty"`
						CumExecQty   string `json:"cumExecQty"`
						CumExecFee   string `json:"cumExecFee"`
						CreatedTime  string `json:"createdTime"`
						UpdatedTime  string `json:"updatedTime"`
					}
					easyjson9d6b4be7Decode2(in, &v1)
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nextPageCursor":
			out.NextPageCursor = string(in.String())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode(out *jwriter.Writer, in struct {
	List []struct {
		OrderID      string `json:"orderId"`
		OrderLinkID  string `json:"orderLinkId"`
		BlockTradeID string `json:"blockTradeId"`
		Symbol       string `json:"symbol"`
		Price        string `json:"price"`
		Qty          string `json:"qty"`
		Side         string `json:"side"`
		PlaceType    string `json:"placeType"`
		OrderType    string `json:"orderType"`
		OrderStatus  string `json:"orderStatus"`
		AvgPrice     string `json:"avgPrice"`
		LeavesQty    string `json:"leavesQty"`
		CumExecQty   string `json:"cumExecQty"`
		CumExecFee   string `json:"cumExecFee"`
		CreatedTime  string `json:"createdTime"`
		UpdatedTime  string `json:"updatedTime"`
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"`
	Category       string `json:"category"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode2(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nextPageCursor\":"
		out.RawString(prefix)
		out.String(string(in.NextPageCursor))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7Decode2(in *jlexer.Lexer, out *struct {
	OrderID      string `json:"orderId"`
	OrderLinkID  string `json:"orderLinkId"`
	BlockTradeID string `json:"blockTradeId"`
	Symbol       string `json:"symbol"`
	Price        string `json:"price"`
	Qty          string `json:"qty"`
	Side         string `json:"side"`
	PlaceType    string `json:"placeType"`
	OrderType    string `json:"orderType"`
	OrderStatus  string `json:"orderStatus"`
	AvgPrice     string `json:"avgPrice"`
	LeavesQty    string `json:"leavesQty"`
	CumExecQty   string `json:"cumExecQty"`
	CumExecFee   string `json:"cumExecFee"`
	CreatedTime  string `json:"createdTime"`
	UpdatedTime  string `json:"updatedTime"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderId":
			out.OrderID = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		case "blockTradeId":
			out.BlockTradeID = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "placeType":
			out.PlaceType = string(in.String())
		case "orderType":
			out.OrderType = string(in.String())
		case "orderStatus":
			out.OrderStatus = string(in.String())
		case "avgPrice":
			out.AvgPrice = string(in.String())
		case "leavesQty":
			out.LeavesQty = string(in.String())
		case "cumExecQty":
			out.CumExecQty = string(in.String())
		case "cumExecFee":
			out.CumExecFee = string(in.String())
		case "createdTime":
			out.CreatedTime = string(in.String())
		case "updatedTime":
			out.UpdatedTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode2(out *jwriter.Writer, in struct {
	OrderID      string `json:"orderId"`
	OrderLinkID  string `json:"orderLinkId"`
	BlockTradeID string `json:"blockTradeId"`
	Symbol       string `json:"symbol"`
	Price        string `json:"price"`
	Qty          string `json:"qty"`
	Side         string `json:"side"`
	PlaceType    string `json:"placeType"`
	OrderType    string `json:"orderType"`
	OrderStatus  string `json:"orderStatus"`
	AvgPrice     string `json:"avgPrice"`
	LeavesQty    string `json:"leavesQty"`
	CumExecQty   string `json:"cumExecQty"`
	CumExecFee   string `json:"cumExecFee"`
	CreatedTime  string `json:"createdTime"`
	UpdatedTime  string `json:"updatedTime"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	{
		const prefix string = ",\"blockTradeId\":"
		out.RawString(prefix)
		out.String(string(in.BlockTradeID))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"placeType\":"
		out.RawString(prefix)
		out.String(string(in.PlaceType))
	}
	{
		const prefix string = ",\"orderType\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"orderStatus\":"
		out.RawString(prefix)
		out.String(string(in.OrderStatus))
	}
	{
		const prefix string = ",\"avgPrice\":"
		out.RawString(prefix)
		out.String(string(in.AvgPrice))
	}
	{
		const prefix string = ",\"leavesQty\":"
		out.RawString(prefix)
		out.String(string(in.LeavesQty))
	}
	{
		const prefix string = ",\"cumExecQty\":"
		out.RawString(prefix)
		out.String(string(in.CumExecQty))
	}
	{
		const prefix string = ",\"cumExecFee\":"
		out.RawString(prefix)
		out.String(string(in.CumExecFee))
	}
	{
		const prefix string = ",\"createdTime\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTime))
	}
	{
		const prefix string = ",\"updatedTime\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedTime))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(in *jlexer.Lexer, out *GetOpenOrdersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode3(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(out *jwriter.Writer, in GetOpenOrdersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode3(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetOpenOrdersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetOpenOrdersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetOpenOrdersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetOpenOrdersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit1(l, v)
}
func easyjson9d6b4be7Decode3(in *jlexer.Lexer, out *struct {
	List []struct {
		OrderID     string `json:"orderId"`
		OrderLinkID string `json:"orderLinkId"`
		Qty         string `json:"qty"`
		Price       string `json:"price"`
		CumExecQty  string `json:"cumExecQty"`
		Side        string `json:"side"`
		Symbol      string `json:"symbol"`
		OrderType   string `json:"orderType"`
		TimeInForce string `json:"timeInForce"`
		CreatedTime string `json:"createdTime"`
		UpdatedTime string `json:"updatedTime"`
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"`
	Category       string `json:"category"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]struct {
							OrderID     string `json:"orderId"`
							OrderLinkID string `json:"orderLinkId"`
							Qty         string `json:"qty"`
							Price       string `json:"price"`
							CumExecQty  string `json:"cumExecQty"`
							Side        string `json:"side"`
							Symbol      string `json:"symbol"`
							OrderType   string `json:"orderType"`
							TimeInForce string `json:"timeInForce"`
							CreatedTime string `json:"createdTime"`
							UpdatedTime string `json:"updatedTime"`
						}, 0, 0)
					} else {
						out.List = []struct {
							OrderID     string `json:"orderId"`
							OrderLinkID string `json:"orderLinkId"`
							Qty         string `json:"qty"`
							Price       string `json:"price"`
							CumExecQty  string `json:"cumExecQty"`
							Side        string `json:"side"`
							Symbol      string `json:"symbol"`
							OrderType   string `json:"orderType"`
							TimeInForce string `json:"timeInForce"`
							CreatedTime string `json:"createdTime"`
							UpdatedTime string `json:"updatedTime"`
						}{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						OrderID     string `json:"orderId"`
						OrderLinkID string `json:"orderLinkId"`
						Qty         string `json:"qty"`
						Price       string `json:"price"`
						CumExecQty  string `json:"cumExecQty"`
						Side        string `json:"side"`
						Symbol      string `json:"symbol"`
						OrderType   string `json:"orderType"`
						TimeInForce string `json:"timeInForce"`
						CreatedTime string `json:"createdTime"`
						UpdatedTime string `json:"updatedTime"`
					}
					easyjson9d6b4be7Decode4(in, &v4)
					out.List = append(out.List, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nextPageCursor":
			out.NextPageCursor = string(in.String())
		case "category":
			out.Category = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode3(out *jwriter.Writer, in struct {
	List []struct {
		OrderID     string `json:"orderId"`
		OrderLinkID string `json:"orderLinkId"`
		Qty         string `json:"qty"`
		Price       string `json:"price"`
		CumExecQty  string `json:"cumExecQty"`
		Side        string `json:"side"`
		Symbol      string `json:"symbol"`
		OrderType   string `json:"orderType"`
		TimeInForce string `json:"timeInForce"`
		CreatedTime string `json:"createdTime"`
		UpdatedTime string `json:"updatedTime"`
	} `json:"list"`
	NextPageCursor string `json:"nextPageCursor"`
	Category       string `json:"category"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.List {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode4(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"nextPageCursor\":"
		out.RawString(prefix)
		out.String(string(in.NextPageCursor))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7Decode4(in *jlexer.Lexer, out *struct {
	OrderID     string `json:"orderId"`
	OrderLinkID string `json:"orderLinkId"`
	Qty         string `json:"qty"`
	Price       string `json:"price"`
	CumExecQty  string `json:"cumExecQty"`
	Side        string `json:"side"`
	Symbol      string `json:"symbol"`
	OrderType   string `json:"orderType"`
	TimeInForce string `json:"timeInForce"`
	CreatedTime string `json:"createdTime"`
	UpdatedTime string `json:"updatedTime"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderId":
			out.OrderID = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "cumExecQty":
			out.CumExecQty = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "orderType":
			out.OrderType = string(in.String())
		case "timeInForce":
			out.TimeInForce = string(in.String())
		case "createdTime":
			out.CreatedTime = string(in.String())
		case "updatedTime":
			out.UpdatedTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode4(out *jwriter.Writer, in struct {
	OrderID     string `json:"orderId"`
	OrderLinkID string `json:"orderLinkId"`
	Qty         string `json:"qty"`
	Price       string `json:"price"`
	CumExecQty  string `json:"cumExecQty"`
	Side        string `json:"side"`
	Symbol      string `json:"symbol"`
	OrderType   string `json:"orderType"`
	TimeInForce string `json:"timeInForce"`
	CreatedTime string `json:"createdTime"`
	UpdatedTime string `json:"updatedTime"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"cumExecQty\":"
		out.RawString(prefix)
		out.String(string(in.CumExecQty))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderType\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	{
		const prefix string = ",\"createdTime\":"
		out.RawString(prefix)
		out.String(string(in.CreatedTime))
	}
	{
		const prefix string = ",\"updatedTime\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedTime))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(in *jlexer.Lexer, out *CreateOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode5(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(out *jwriter.Writer, in CreateOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode5(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit2(l, v)
}
func easyjson9d6b4be7Decode5(in *jlexer.Lexer, out *struct {
	OrderID     string `json:"orderId"`
	OrderLinkID string `json:"orderLinkId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "orderId":
			out.OrderID = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode5(out *jwriter.Writer, in struct {
	OrderID     string `json:"orderId"`
	OrderLinkID string `json:"orderLinkId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix[1:])
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(in *jlexer.Lexer, out *CreateOrderParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "orderType":
			out.OrderType = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "price":
			out.Price = string(in.String())
		case "timeInForce":
			out.TimeInForce = TimeInForce(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(out *jwriter.Writer, in CreateOrderParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"orderType\":"
		out.RawString(prefix)
		out.String(string(in.OrderType))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"timeInForce\":"
		out.RawString(prefix)
		out.String(string(in.TimeInForce))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit3(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(in *jlexer.Lexer, out *CancelOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode5(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(out *jwriter.Writer, in CancelOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode5(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit4(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(in *jlexer.Lexer, out *CancelOrderParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		case "orderId":
			out.OrderID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(out *jwriter.Writer, in CancelOrderParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit5(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(in *jlexer.Lexer, out *CancelAllOrdersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode6(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(out *jwriter.Writer, in CancelAllOrdersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode6(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAllOrdersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAllOrdersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAllOrdersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAllOrdersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit6(l, v)
}
func easyjson9d6b4be7Decode6(in *jlexer.Lexer, out *struct {
	List []struct {
		OrderID     string `json:"orderId"`
		OrderLinkID string `json:"orderLinkId"`
	} `json:"list"`
	Success string `json:"success"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]struct {
							OrderID     string `json:"orderId"`
							OrderLinkID string `json:"orderLinkId"`
						}, 0, 2)
					} else {
						out.List = []struct {
							OrderID     string `json:"orderId"`
							OrderLinkID string `json:"orderLinkId"`
						}{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v7 struct {
						OrderID     string `json:"orderId"`
						OrderLinkID string `json:"orderLinkId"`
					}
					easyjson9d6b4be7Decode5(in, &v7)
					out.List = append(out.List, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "success":
			out.Success = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode6(out *jwriter.Writer, in struct {
	List []struct {
		OrderID     string `json:"orderId"`
		OrderLinkID string `json:"orderLinkId"`
	} `json:"list"`
	Success string `json:"success"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.List {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode5(out, v9)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"success\":"
		out.RawString(prefix)
		out.String(string(in.Success))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(in *jlexer.Lexer, out *CancelAllOrdersParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = InstrumentType(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(out *jwriter.Writer, in CancelAllOrdersParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAllOrdersParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAllOrdersParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAllOrdersParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAllOrdersParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit7(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(in *jlexer.Lexer, out *AmendOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson9d6b4be7Decode5(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson9d6b4be7Decode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(out *jwriter.Writer, in AmendOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson9d6b4be7Encode5(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson9d6b4be7Encode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmendOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmendOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmendOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmendOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit8(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(in *jlexer.Lexer, out *AmendOrderParams) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "category":
			out.Category = string(in.String())
		case "symbol":
			out.Symbol = string(in.String())
		case "orderId":
			out.OrderID = string(in.String())
		case "orderLinkId":
			out.OrderLinkID = string(in.String())
		case "qty":
			out.Qty = string(in.String())
		case "price":
			out.Price = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(out *jwriter.Writer, in AmendOrderParams) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix[1:])
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"symbol\":"
		out.RawString(prefix)
		out.String(string(in.Symbol))
	}
	{
		const prefix string = ",\"orderId\":"
		out.RawString(prefix)
		out.String(string(in.OrderID))
	}
	{
		const prefix string = ",\"orderLinkId\":"
		out.RawString(prefix)
		out.String(string(in.OrderLinkID))
	}
	{
		const prefix string = ",\"qty\":"
		out.RawString(prefix)
		out.String(string(in.Qty))
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmendOrderParams) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmendOrderParams) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmendOrderParams) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmendOrderParams) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit9(l, v)
}
