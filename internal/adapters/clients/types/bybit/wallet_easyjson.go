// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bybit

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b96abDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(in *jlexer.Lexer, out *GetBalancesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "result":
			easyjson22b96abDecode(in, &out.Result)
		case "retCode":
			out.Code = int(in.Int())
		case "retMsg":
			out.Msg = string(in.String())
		case "retExtInfo":
			easyjson22b96abDecode1(in, &out.Info)
		case "time":
			out.Time = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b96abEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(out *jwriter.Writer, in GetBalancesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix[1:])
		easyjson22b96abEncode(out, in.Result)
	}
	{
		const prefix string = ",\"retCode\":"
		out.RawString(prefix)
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"retMsg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"retExtInfo\":"
		out.RawString(prefix)
		easyjson22b96abEncode1(out, in.Info)
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.Int64(int64(in.Time))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetBalancesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b96abEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetBalancesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b96abEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetBalancesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b96abDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetBalancesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b96abDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesBybit(l, v)
}
func easyjson22b96abDecode1(in *jlexer.Lexer, out *struct{}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b96abEncode1(out *jwriter.Writer, in struct{}) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}
func easyjson22b96abDecode(in *jlexer.Lexer, out *struct {
	List []struct {
		Coin []struct {
			WalletBalance string `json:"walletBalance"`
			Coin          string `json:"coin"`
		} `json:"coin"`
	} `json:"list"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "list":
			if in.IsNull() {
				in.Skip()
				out.List = nil
			} else {
				in.Delim('[')
				if out.List == nil {
					if !in.IsDelim(']') {
						out.List = make([]struct {
							Coin []struct {
								WalletBalance string `json:"walletBalance"`
								Coin          string `json:"coin"`
							} `json:"coin"`
						}, 0, 2)
					} else {
						out.List = []struct {
							Coin []struct {
								WalletBalance string `json:"walletBalance"`
								Coin          string `json:"coin"`
							} `json:"coin"`
						}{}
					}
				} else {
					out.List = (out.List)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						Coin []struct {
							WalletBalance string `json:"walletBalance"`
							Coin          string `json:"coin"`
						} `json:"coin"`
					}
					easyjson22b96abDecode2(in, &v1)
					out.List = append(out.List, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b96abEncode(out *jwriter.Writer, in struct {
	List []struct {
		Coin []struct {
			WalletBalance string `json:"walletBalance"`
			Coin          string `json:"coin"`
		} `json:"coin"`
	} `json:"list"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"list\":"
		out.RawString(prefix[1:])
		if in.List == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.List {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson22b96abEncode2(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson22b96abDecode2(in *jlexer.Lexer, out *struct {
	Coin []struct {
		WalletBalance string `json:"walletBalance"`
		Coin          string `json:"coin"`
	} `json:"coin"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coin":
			if in.IsNull() {
				in.Skip()
				out.Coin = nil
			} else {
				in.Delim('[')
				if out.Coin == nil {
					if !in.IsDelim(']') {
						out.Coin = make([]struct {
							WalletBalance string `json:"walletBalance"`
							Coin          string `json:"coin"`
						}, 0, 2)
					} else {
						out.Coin = []struct {
							WalletBalance string `json:"walletBalance"`
							Coin          string `json:"coin"`
						}{}
					}
				} else {
					out.Coin = (out.Coin)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						WalletBalance string `json:"walletBalance"`
						Coin          string `json:"coin"`
					}
					easyjson22b96abDecode3(in, &v4)
					out.Coin = append(out.Coin, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b96abEncode2(out *jwriter.Writer, in struct {
	Coin []struct {
		WalletBalance string `json:"walletBalance"`
		Coin          string `json:"coin"`
	} `json:"coin"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix[1:])
		if in.Coin == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Coin {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson22b96abEncode3(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson22b96abDecode3(in *jlexer.Lexer, out *struct {
	WalletBalance string `json:"walletBalance"`
	Coin          string `json:"coin"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "walletBalance":
			out.WalletBalance = string(in.String())
		case "coin":
			out.Coin = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b96abEncode3(out *jwriter.Writer, in struct {
	WalletBalance string `json:"walletBalance"`
	Coin          string `json:"coin"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"walletBalance\":"
		out.RawString(prefix[1:])
		out.String(string(in.WalletBalance))
	}
	{
		const prefix string = ",\"coin\":"
		out.RawString(prefix)
		out.String(string(in.Coin))
	}
	out.RawByte('}')
}
