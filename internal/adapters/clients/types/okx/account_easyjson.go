// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package okx

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson349b126bDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(in *jlexer.Lexer, out *BalancesResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							AdjEq      string `json:"adjEq"`
							BorrowFroz string `json:"borrowFroz"`
							Details    []struct {
								AvailBal      string `json:"availBal"`
								AvailEq       string `json:"availEq"`
								CashBal       string `json:"cashBal"`
								Ccy           string `json:"ccy"`
								CrossLiab     string `json:"crossLiab"`
								DisEq         string `json:"disEq"`
								Eq            string `json:"eq"`
								EqUsd         string `json:"eqUsd"`
								FixedBal      string `json:"fixedBal"`
								FrozenBal     string `json:"frozenBal"`
								Interest      string `json:"interest"`
								IsoEq         string `json:"isoEq"`
								IsoLiab       string `json:"isoLiab"`
								IsoUpl        string `json:"isoUpl"`
								Liab          string `json:"liab"`
								MaxLoan       string `json:"maxLoan"`
								MgnRatio      string `json:"mgnRatio"`
								NotionalLever string `json:"notionalLever"`
								OrdFrozen     string `json:"ordFrozen"`
								Twap          string `json:"twap"`
								UTime         string `json:"uTime"`
								Upl           string `json:"upl"`
								UplLiab       string `json:"uplLiab"`
								StgyEq        string `json:"stgyEq"`
								SpotInUseAmt  string `json:"spotInUseAmt"`
								BorrowFroz    string `json:"borrowFroz"`
							} `json:"details"`
							Imr         string `json:"imr"`
							IsoEq       string `json:"isoEq"`
							MgnRatio    string `json:"mgnRatio"`
							Mmr         string `json:"mmr"`
							NotionalUsd string `json:"notionalUsd"`
							OrdFroz     string `json:"ordFroz"`
							TotalEq     string `json:"totalEq"`
							UTime       string `json:"uTime"`
						}, 0, 0)
					} else {
						out.Data = []struct {
							AdjEq      string `json:"adjEq"`
							BorrowFroz string `json:"borrowFroz"`
							Details    []struct {
								AvailBal      string `json:"availBal"`
								AvailEq       string `json:"availEq"`
								CashBal       string `json:"cashBal"`
								Ccy           string `json:"ccy"`
								CrossLiab     string `json:"crossLiab"`
								DisEq         string `json:"disEq"`
								Eq            string `json:"eq"`
								EqUsd         string `json:"eqUsd"`
								FixedBal      string `json:"fixedBal"`
								FrozenBal     string `json:"frozenBal"`
								Interest      string `json:"interest"`
								IsoEq         string `json:"isoEq"`
								IsoLiab       string `json:"isoLiab"`
								IsoUpl        string `json:"isoUpl"`
								Liab          string `json:"liab"`
								MaxLoan       string `json:"maxLoan"`
								MgnRatio      string `json:"mgnRatio"`
								NotionalLever string `json:"notionalLever"`
								OrdFrozen     string `json:"ordFrozen"`
								Twap          string `json:"twap"`
								UTime         string `json:"uTime"`
								Upl           string `json:"upl"`
								UplLiab       string `json:"uplLiab"`
								StgyEq        string `json:"stgyEq"`
								SpotInUseAmt  string `json:"spotInUseAmt"`
								BorrowFroz    string `json:"borrowFroz"`
							} `json:"details"`
							Imr         string `json:"imr"`
							IsoEq       string `json:"isoEq"`
							MgnRatio    string `json:"mgnRatio"`
							Mmr         string `json:"mmr"`
							NotionalUsd string `json:"notionalUsd"`
							OrdFroz     string `json:"ordFroz"`
							TotalEq     string `json:"totalEq"`
							UTime       string `json:"uTime"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 struct {
						AdjEq      string `json:"adjEq"`
						BorrowFroz string `json:"borrowFroz"`
						Details    []struct {
							AvailBal      string `json:"availBal"`
							AvailEq       string `json:"availEq"`
							CashBal       string `json:"cashBal"`
							Ccy           string `json:"ccy"`
							CrossLiab     string `json:"crossLiab"`
							DisEq         string `json:"disEq"`
							Eq            string `json:"eq"`
							EqUsd         string `json:"eqUsd"`
							FixedBal      string `json:"fixedBal"`
							FrozenBal     string `json:"frozenBal"`
							Interest      string `json:"interest"`
							IsoEq         string `json:"isoEq"`
							IsoLiab       string `json:"isoLiab"`
							IsoUpl        string `json:"isoUpl"`
							Liab          string `json:"liab"`
							MaxLoan       string `json:"maxLoan"`
							MgnRatio      string `json:"mgnRatio"`
							NotionalLever string `json:"notionalLever"`
							OrdFrozen     string `json:"ordFrozen"`
							Twap          string `json:"twap"`
							UTime         string `json:"uTime"`
							Upl           string `json:"upl"`
							UplLiab       string `json:"uplLiab"`
							StgyEq        string `json:"stgyEq"`
							SpotInUseAmt  string `json:"spotInUseAmt"`
							BorrowFroz    string `json:"borrowFroz"`
						} `json:"details"`
						Imr         string `json:"imr"`
						IsoEq       string `json:"isoEq"`
						MgnRatio    string `json:"mgnRatio"`
						Mmr         string `json:"mmr"`
						NotionalUsd string `json:"notionalUsd"`
						OrdFroz     string `json:"ordFroz"`
						TotalEq     string `json:"totalEq"`
						UTime       string `json:"uTime"`
					}
					easyjson349b126bDecode(in, &v1)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(out *jwriter.Writer, in BalancesResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson349b126bEncode(out, v3)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BalancesResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson349b126bEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BalancesResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson349b126bEncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BalancesResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson349b126bDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BalancesResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson349b126bDecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(l, v)
}
func easyjson349b126bDecode(in *jlexer.Lexer, out *struct {
	AdjEq      string `json:"adjEq"`
	BorrowFroz string `json:"borrowFroz"`
	Details    []struct {
		AvailBal      string `json:"availBal"`
		AvailEq       string `json:"availEq"`
		CashBal       string `json:"cashBal"`
		Ccy           string `json:"ccy"`
		CrossLiab     string `json:"crossLiab"`
		DisEq         string `json:"disEq"`
		Eq            string `json:"eq"`
		EqUsd         string `json:"eqUsd"`
		FixedBal      string `json:"fixedBal"`
		FrozenBal     string `json:"frozenBal"`
		Interest      string `json:"interest"`
		IsoEq         string `json:"isoEq"`
		IsoLiab       string `json:"isoLiab"`
		IsoUpl        string `json:"isoUpl"`
		Liab          string `json:"liab"`
		MaxLoan       string `json:"maxLoan"`
		MgnRatio      string `json:"mgnRatio"`
		NotionalLever string `json:"notionalLever"`
		OrdFrozen     string `json:"ordFrozen"`
		Twap          string `json:"twap"`
		UTime         string `json:"uTime"`
		Upl           string `json:"upl"`
		UplLiab       string `json:"uplLiab"`
		StgyEq        string `json:"stgyEq"`
		SpotInUseAmt  string `json:"spotInUseAmt"`
		BorrowFroz    string `json:"borrowFroz"`
	} `json:"details"`
	Imr         string `json:"imr"`
	IsoEq       string `json:"isoEq"`
	MgnRatio    string `json:"mgnRatio"`
	Mmr         string `json:"mmr"`
	NotionalUsd string `json:"notionalUsd"`
	OrdFroz     string `json:"ordFroz"`
	TotalEq     string `json:"totalEq"`
	UTime       string `json:"uTime"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "adjEq":
			out.AdjEq = string(in.String())
		case "borrowFroz":
			out.BorrowFroz = string(in.String())
		case "details":
			if in.IsNull() {
				in.Skip()
				out.Details = nil
			} else {
				in.Delim('[')
				if out.Details == nil {
					if !in.IsDelim(']') {
						out.Details = make([]struct {
							AvailBal      string `json:"availBal"`
							AvailEq       string `json:"availEq"`
							CashBal       string `json:"cashBal"`
							Ccy           string `json:"ccy"`
							CrossLiab     string `json:"crossLiab"`
							DisEq         string `json:"disEq"`
							Eq            string `json:"eq"`
							EqUsd         string `json:"eqUsd"`
							FixedBal      string `json:"fixedBal"`
							FrozenBal     string `json:"frozenBal"`
							Interest      string `json:"interest"`
							IsoEq         string `json:"isoEq"`
							IsoLiab       string `json:"isoLiab"`
							IsoUpl        string `json:"isoUpl"`
							Liab          string `json:"liab"`
							MaxLoan       string `json:"maxLoan"`
							MgnRatio      string `json:"mgnRatio"`
							NotionalLever string `json:"notionalLever"`
							OrdFrozen     string `json:"ordFrozen"`
							Twap          string `json:"twap"`
							UTime         string `json:"uTime"`
							Upl           string `json:"upl"`
							UplLiab       string `json:"uplLiab"`
							StgyEq        string `json:"stgyEq"`
							SpotInUseAmt  string `json:"spotInUseAmt"`
							BorrowFroz    string `json:"borrowFroz"`
						}, 0, 0)
					} else {
						out.Details = []struct {
							AvailBal      string `json:"availBal"`
							AvailEq       string `json:"availEq"`
							CashBal       string `json:"cashBal"`
							Ccy           string `json:"ccy"`
							CrossLiab     string `json:"crossLiab"`
							DisEq         string `json:"disEq"`
							Eq            string `json:"eq"`
							EqUsd         string `json:"eqUsd"`
							FixedBal      string `json:"fixedBal"`
							FrozenBal     string `json:"frozenBal"`
							Interest      string `json:"interest"`
							IsoEq         string `json:"isoEq"`
							IsoLiab       string `json:"isoLiab"`
							IsoUpl        string `json:"isoUpl"`
							Liab          string `json:"liab"`
							MaxLoan       string `json:"maxLoan"`
							MgnRatio      string `json:"mgnRatio"`
							NotionalLever string `json:"notionalLever"`
							OrdFrozen     string `json:"ordFrozen"`
							Twap          string `json:"twap"`
							UTime         string `json:"uTime"`
							Upl           string `json:"upl"`
							UplLiab       string `json:"uplLiab"`
							StgyEq        string `json:"stgyEq"`
							SpotInUseAmt  string `json:"spotInUseAmt"`
							BorrowFroz    string `json:"borrowFroz"`
						}{}
					}
				} else {
					out.Details = (out.Details)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						AvailBal      string `json:"availBal"`
						AvailEq       string `json:"availEq"`
						CashBal       string `json:"cashBal"`
						Ccy           string `json:"ccy"`
						CrossLiab     string `json:"crossLiab"`
						DisEq         string `json:"disEq"`
						Eq            string `json:"eq"`
						EqUsd         string `json:"eqUsd"`
						FixedBal      string `json:"fixedBal"`
						FrozenBal     string `json:"frozenBal"`
						Interest      string `json:"interest"`
						IsoEq         string `json:"isoEq"`
						IsoLiab       string `json:"isoLiab"`
						IsoUpl        string `json:"isoUpl"`
						Liab          string `json:"liab"`
						MaxLoan       string `json:"maxLoan"`
						MgnRatio      string `json:"mgnRatio"`
						NotionalLever string `json:"notionalLever"`
						OrdFrozen     string `json:"ordFrozen"`
						Twap          string `json:"twap"`
						UTime         string `json:"uTime"`
						Upl           string `json:"upl"`
						UplLiab       string `json:"uplLiab"`
						StgyEq        string `json:"stgyEq"`
						SpotInUseAmt  string `json:"spotInUseAmt"`
						BorrowFroz    string `json:"borrowFroz"`
					}
					easyjson349b126bDecode1(in, &v4)
					out.Details = append(out.Details, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "imr":
			out.Imr = string(in.String())
		case "isoEq":
			out.IsoEq = string(in.String())
		case "mgnRatio":
			out.MgnRatio = string(in.String())
		case "mmr":
			out.Mmr = string(in.String())
		case "notionalUsd":
			out.NotionalUsd = string(in.String())
		case "ordFroz":
			out.OrdFroz = string(in.String())
		case "totalEq":
			out.TotalEq = string(in.String())
		case "uTime":
			out.UTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncode(out *jwriter.Writer, in struct {
	AdjEq      string `json:"adjEq"`
	BorrowFroz string `json:"borrowFroz"`
	Details    []struct {
		AvailBal      string `json:"availBal"`
		AvailEq       string `json:"availEq"`
		CashBal       string `json:"cashBal"`
		Ccy           string `json:"ccy"`
		CrossLiab     string `json:"crossLiab"`
		DisEq         string `json:"disEq"`
		Eq            string `json:"eq"`
		EqUsd         string `json:"eqUsd"`
		FixedBal      string `json:"fixedBal"`
		FrozenBal     string `json:"frozenBal"`
		Interest      string `json:"interest"`
		IsoEq         string `json:"isoEq"`
		IsoLiab       string `json:"isoLiab"`
		IsoUpl        string `json:"isoUpl"`
		Liab          string `json:"liab"`
		MaxLoan       string `json:"maxLoan"`
		MgnRatio      string `json:"mgnRatio"`
		NotionalLever string `json:"notionalLever"`
		OrdFrozen     string `json:"ordFrozen"`
		Twap          string `json:"twap"`
		UTime         string `json:"uTime"`
		Upl           string `json:"upl"`
		UplLiab       string `json:"uplLiab"`
		StgyEq        string `json:"stgyEq"`
		SpotInUseAmt  string `json:"spotInUseAmt"`
		BorrowFroz    string `json:"borrowFroz"`
	} `json:"details"`
	Imr         string `json:"imr"`
	IsoEq       string `json:"isoEq"`
	MgnRatio    string `json:"mgnRatio"`
	Mmr         string `json:"mmr"`
	NotionalUsd string `json:"notionalUsd"`
	OrdFroz     string `json:"ordFroz"`
	TotalEq     string `json:"totalEq"`
	UTime       string `json:"uTime"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"adjEq\":"
		out.RawString(prefix[1:])
		out.String(string(in.AdjEq))
	}
	{
		const prefix string = ",\"borrowFroz\":"
		out.RawString(prefix)
		out.String(string(in.BorrowFroz))
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		if in.Details == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Details {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson349b126bEncode1(out, v6)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"imr\":"
		out.RawString(prefix)
		out.String(string(in.Imr))
	}
	{
		const prefix string = ",\"isoEq\":"
		out.RawString(prefix)
		out.String(string(in.IsoEq))
	}
	{
		const prefix string = ",\"mgnRatio\":"
		out.RawString(prefix)
		out.String(string(in.MgnRatio))
	}
	{
		const prefix string = ",\"mmr\":"
		out.RawString(prefix)
		out.String(string(in.Mmr))
	}
	{
		const prefix string = ",\"notionalUsd\":"
		out.RawString(prefix)
		out.String(string(in.NotionalUsd))
	}
	{
		const prefix string = ",\"ordFroz\":"
		out.RawString(prefix)
		out.String(string(in.OrdFroz))
	}
	{
		const prefix string = ",\"totalEq\":"
		out.RawString(prefix)
		out.String(string(in.TotalEq))
	}
	{
		const prefix string = ",\"uTime\":"
		out.RawString(prefix)
		out.String(string(in.UTime))
	}
	out.RawByte('}')
}
func easyjson349b126bDecode1(in *jlexer.Lexer, out *struct {
	AvailBal      string `json:"availBal"`
	AvailEq       string `json:"availEq"`
	CashBal       string `json:"cashBal"`
	Ccy           string `json:"ccy"`
	CrossLiab     string `json:"crossLiab"`
	DisEq         string `json:"disEq"`
	Eq            string `json:"eq"`
	EqUsd         string `json:"eqUsd"`
	FixedBal      string `json:"fixedBal"`
	FrozenBal     string `json:"frozenBal"`
	Interest      string `json:"interest"`
	IsoEq         string `json:"isoEq"`
	IsoLiab       string `json:"isoLiab"`
	IsoUpl        string `json:"isoUpl"`
	Liab          string `json:"liab"`
	MaxLoan       string `json:"maxLoan"`
	MgnRatio      string `json:"mgnRatio"`
	NotionalLever string `json:"notionalLever"`
	OrdFrozen     string `json:"ordFrozen"`
	Twap          string `json:"twap"`
	UTime         string `json:"uTime"`
	Upl           string `json:"upl"`
	UplLiab       string `json:"uplLiab"`
	StgyEq        string `json:"stgyEq"`
	SpotInUseAmt  string `json:"spotInUseAmt"`
	BorrowFroz    string `json:"borrowFroz"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "availBal":
			out.AvailBal = string(in.String())
		case "availEq":
			out.AvailEq = string(in.String())
		case "cashBal":
			out.CashBal = string(in.String())
		case "ccy":
			out.Ccy = string(in.String())
		case "crossLiab":
			out.CrossLiab = string(in.String())
		case "disEq":
			out.DisEq = string(in.String())
		case "eq":
			out.Eq = string(in.String())
		case "eqUsd":
			out.EqUsd = string(in.String())
		case "fixedBal":
			out.FixedBal = string(in.String())
		case "frozenBal":
			out.FrozenBal = string(in.String())
		case "interest":
			out.Interest = string(in.String())
		case "isoEq":
			out.IsoEq = string(in.String())
		case "isoLiab":
			out.IsoLiab = string(in.String())
		case "isoUpl":
			out.IsoUpl = string(in.String())
		case "liab":
			out.Liab = string(in.String())
		case "maxLoan":
			out.MaxLoan = string(in.String())
		case "mgnRatio":
			out.MgnRatio = string(in.String())
		case "notionalLever":
			out.NotionalLever = string(in.String())
		case "ordFrozen":
			out.OrdFrozen = string(in.String())
		case "twap":
			out.Twap = string(in.String())
		case "uTime":
			out.UTime = string(in.String())
		case "upl":
			out.Upl = string(in.String())
		case "uplLiab":
			out.UplLiab = string(in.String())
		case "stgyEq":
			out.StgyEq = string(in.String())
		case "spotInUseAmt":
			out.SpotInUseAmt = string(in.String())
		case "borrowFroz":
			out.BorrowFroz = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson349b126bEncode1(out *jwriter.Writer, in struct {
	AvailBal      string `json:"availBal"`
	AvailEq       string `json:"availEq"`
	CashBal       string `json:"cashBal"`
	Ccy           string `json:"ccy"`
	CrossLiab     string `json:"crossLiab"`
	DisEq         string `json:"disEq"`
	Eq            string `json:"eq"`
	EqUsd         string `json:"eqUsd"`
	FixedBal      string `json:"fixedBal"`
	FrozenBal     string `json:"frozenBal"`
	Interest      string `json:"interest"`
	IsoEq         string `json:"isoEq"`
	IsoLiab       string `json:"isoLiab"`
	IsoUpl        string `json:"isoUpl"`
	Liab          string `json:"liab"`
	MaxLoan       string `json:"maxLoan"`
	MgnRatio      string `json:"mgnRatio"`
	NotionalLever string `json:"notionalLever"`
	OrdFrozen     string `json:"ordFrozen"`
	Twap          string `json:"twap"`
	UTime         string `json:"uTime"`
	Upl           string `json:"upl"`
	UplLiab       string `json:"uplLiab"`
	StgyEq        string `json:"stgyEq"`
	SpotInUseAmt  string `json:"spotInUseAmt"`
	BorrowFroz    string `json:"borrowFroz"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"availBal\":"
		out.RawString(prefix[1:])
		out.String(string(in.AvailBal))
	}
	{
		const prefix string = ",\"availEq\":"
		out.RawString(prefix)
		out.String(string(in.AvailEq))
	}
	{
		const prefix string = ",\"cashBal\":"
		out.RawString(prefix)
		out.String(string(in.CashBal))
	}
	{
		const prefix string = ",\"ccy\":"
		out.RawString(prefix)
		out.String(string(in.Ccy))
	}
	{
		const prefix string = ",\"crossLiab\":"
		out.RawString(prefix)
		out.String(string(in.CrossLiab))
	}
	{
		const prefix string = ",\"disEq\":"
		out.RawString(prefix)
		out.String(string(in.DisEq))
	}
	{
		const prefix string = ",\"eq\":"
		out.RawString(prefix)
		out.String(string(in.Eq))
	}
	{
		const prefix string = ",\"eqUsd\":"
		out.RawString(prefix)
		out.String(string(in.EqUsd))
	}
	{
		const prefix string = ",\"fixedBal\":"
		out.RawString(prefix)
		out.String(string(in.FixedBal))
	}
	{
		const prefix string = ",\"frozenBal\":"
		out.RawString(prefix)
		out.String(string(in.FrozenBal))
	}
	{
		const prefix string = ",\"interest\":"
		out.RawString(prefix)
		out.String(string(in.Interest))
	}
	{
		const prefix string = ",\"isoEq\":"
		out.RawString(prefix)
		out.String(string(in.IsoEq))
	}
	{
		const prefix string = ",\"isoLiab\":"
		out.RawString(prefix)
		out.String(string(in.IsoLiab))
	}
	{
		const prefix string = ",\"isoUpl\":"
		out.RawString(prefix)
		out.String(string(in.IsoUpl))
	}
	{
		const prefix string = ",\"liab\":"
		out.RawString(prefix)
		out.String(string(in.Liab))
	}
	{
		const prefix string = ",\"maxLoan\":"
		out.RawString(prefix)
		out.String(string(in.MaxLoan))
	}
	{
		const prefix string = ",\"mgnRatio\":"
		out.RawString(prefix)
		out.String(string(in.MgnRatio))
	}
	{
		const prefix string = ",\"notionalLever\":"
		out.RawString(prefix)
		out.String(string(in.NotionalLever))
	}
	{
		const prefix string = ",\"ordFrozen\":"
		out.RawString(prefix)
		out.String(string(in.OrdFrozen))
	}
	{
		const prefix string = ",\"twap\":"
		out.RawString(prefix)
		out.String(string(in.Twap))
	}
	{
		const prefix string = ",\"uTime\":"
		out.RawString(prefix)
		out.String(string(in.UTime))
	}
	{
		const prefix string = ",\"upl\":"
		out.RawString(prefix)
		out.String(string(in.Upl))
	}
	{
		const prefix string = ",\"uplLiab\":"
		out.RawString(prefix)
		out.String(string(in.UplLiab))
	}
	{
		const prefix string = ",\"stgyEq\":"
		out.RawString(prefix)
		out.String(string(in.StgyEq))
	}
	{
		const prefix string = ",\"spotInUseAmt\":"
		out.RawString(prefix)
		out.String(string(in.SpotInUseAmt))
	}
	{
		const prefix string = ",\"borrowFroz\":"
		out.RawString(prefix)
		out.String(string(in.BorrowFroz))
	}
	out.RawByte('}')
}
