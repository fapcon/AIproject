// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package okx

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(in *jlexer.Lexer, out *OrderHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]HistoricalOrder, 0, 0)
					} else {
						out.Data = []HistoricalOrder{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 HistoricalOrder
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(out *jwriter.Writer, in OrderHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(in *jlexer.Lexer, out *OpenOrdersResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							AccFillSz         string `json:"accFillSz"`
							AvgPx             string `json:"avgPx"`
							CTime             string `json:"cTime"`
							Category          string `json:"category"`
							Ccy               string `json:"ccy"`
							ClOrdID           string `json:"clOrdId"`
							Fee               string `json:"fee"`
							FeeCcy            string `json:"feeCcy"`
							FillPx            string `json:"fillPx"`
							FillSz            string `json:"fillSz"`
							FillTime          string `json:"fillTime"`
							InstID            string `json:"instId"`
							InstType          string `json:"instType"`
							Lever             string `json:"lever"`
							OrdID             string `json:"ordId"`
							OrdType           string `json:"ordType"`
							Pnl               string `json:"pnl"`
							PosSide           string `json:"posSide"`
							Px                string `json:"px"`
							PxUsd             string `json:"pxUsd"`
							PxVol             string `json:"pxVol"`
							PxType            string `json:"pxType"`
							Rebate            string `json:"rebate"`
							RebateCcy         string `json:"rebateCcy"`
							Side              string `json:"side"`
							AttachAlgoClOrdID string `json:"attachAlgoClOrdId"`
							SlOrdPx           string `json:"slOrdPx"`
							SlTriggerPx       string `json:"slTriggerPx"`
							SlTriggerPxType   string `json:"slTriggerPxType"`
							State             string `json:"state"`
							StpID             string `json:"stpId"`
							StpMode           string `json:"stpMode"`
							Sz                string `json:"sz"`
							Tag               string `json:"tag"`
							TgtCcy            string `json:"tgtCcy"`
							TdMode            string `json:"tdMode"`
							Source            string `json:"source"`
							TpOrdPx           string `json:"tpOrdPx"`
							TpTriggerPx       string `json:"tpTriggerPx"`
							TpTriggerPxType   string `json:"tpTriggerPxType"`
							TradeID           string `json:"tradeId"`
							ReduceOnly        string `json:"reduceOnly"`
							QuickMgnType      string `json:"quickMgnType"`
							AlgoClOrdID       string `json:"algoClOrdId"`
							AlgoID            string `json:"algoId"`
							UTime             string `json:"uTime"`
						}, 0, 0)
					} else {
						out.Data = []struct {
							AccFillSz         string `json:"accFillSz"`
							AvgPx             string `json:"avgPx"`
							CTime             string `json:"cTime"`
							Category          string `json:"category"`
							Ccy               string `json:"ccy"`
							ClOrdID           string `json:"clOrdId"`
							Fee               string `json:"fee"`
							FeeCcy            string `json:"feeCcy"`
							FillPx            string `json:"fillPx"`
							FillSz            string `json:"fillSz"`
							FillTime          string `json:"fillTime"`
							InstID            string `json:"instId"`
							InstType          string `json:"instType"`
							Lever             string `json:"lever"`
							OrdID             string `json:"ordId"`
							OrdType           string `json:"ordType"`
							Pnl               string `json:"pnl"`
							PosSide           string `json:"posSide"`
							Px                string `json:"px"`
							PxUsd             string `json:"pxUsd"`
							PxVol             string `json:"pxVol"`
							PxType            string `json:"pxType"`
							Rebate            string `json:"rebate"`
							RebateCcy         string `json:"rebateCcy"`
							Side              string `json:"side"`
							AttachAlgoClOrdID string `json:"attachAlgoClOrdId"`
							SlOrdPx           string `json:"slOrdPx"`
							SlTriggerPx       string `json:"slTriggerPx"`
							SlTriggerPxType   string `json:"slTriggerPxType"`
							State             string `json:"state"`
							StpID             string `json:"stpId"`
							StpMode           string `json:"stpMode"`
							Sz                string `json:"sz"`
							Tag               string `json:"tag"`
							TgtCcy            string `json:"tgtCcy"`
							TdMode            string `json:"tdMode"`
							Source            string `json:"source"`
							TpOrdPx           string `json:"tpOrdPx"`
							TpTriggerPx       string `json:"tpTriggerPx"`
							TpTriggerPxType   string `json:"tpTriggerPxType"`
							TradeID           string `json:"tradeId"`
							ReduceOnly        string `json:"reduceOnly"`
							QuickMgnType      string `json:"quickMgnType"`
							AlgoClOrdID       string `json:"algoClOrdId"`
							AlgoID            string `json:"algoId"`
							UTime             string `json:"uTime"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						AccFillSz         string `json:"accFillSz"`
						AvgPx             string `json:"avgPx"`
						CTime             string `json:"cTime"`
						Category          string `json:"category"`
						Ccy               string `json:"ccy"`
						ClOrdID           string `json:"clOrdId"`
						Fee               string `json:"fee"`
						FeeCcy            string `json:"feeCcy"`
						FillPx            string `json:"fillPx"`
						FillSz            string `json:"fillSz"`
						FillTime          string `json:"fillTime"`
						InstID            string `json:"instId"`
						InstType          string `json:"instType"`
						Lever             string `json:"lever"`
						OrdID             string `json:"ordId"`
						OrdType           string `json:"ordType"`
						Pnl               string `json:"pnl"`
						PosSide           string `json:"posSide"`
						Px                string `json:"px"`
						PxUsd             string `json:"pxUsd"`
						PxVol             string `json:"pxVol"`
						PxType            string `json:"pxType"`
						Rebate            string `json:"rebate"`
						RebateCcy         string `json:"rebateCcy"`
						Side              string `json:"side"`
						AttachAlgoClOrdID string `json:"attachAlgoClOrdId"`
						SlOrdPx           string `json:"slOrdPx"`
						SlTriggerPx       string `json:"slTriggerPx"`
						SlTriggerPxType   string `json:"slTriggerPxType"`
						State             string `json:"state"`
						StpID             string `json:"stpId"`
						StpMode           string `json:"stpMode"`
						Sz                string `json:"sz"`
						Tag               string `json:"tag"`
						TgtCcy            string `json:"tgtCcy"`
						TdMode            string `json:"tdMode"`
						Source            string `json:"source"`
						TpOrdPx           string `json:"tpOrdPx"`
						TpTriggerPx       string `json:"tpTriggerPx"`
						TpTriggerPxType   string `json:"tpTriggerPxType"`
						TradeID           string `json:"tradeId"`
						ReduceOnly        string `json:"reduceOnly"`
						QuickMgnType      string `json:"quickMgnType"`
						AlgoClOrdID       string `json:"algoClOrdId"`
						AlgoID            string `json:"algoId"`
						UTime             string `json:"uTime"`
					}
					easyjson9d6b4be7Decode(in, &v4)
					out.Data = append(out.Data, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(out *jwriter.Writer, in OpenOrdersResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Data {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OpenOrdersResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OpenOrdersResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OpenOrdersResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OpenOrdersResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx1(l, v)
}
func easyjson9d6b4be7Decode(in *jlexer.Lexer, out *struct {
	AccFillSz         string `json:"accFillSz"`
	AvgPx             string `json:"avgPx"`
	CTime             string `json:"cTime"`
	Category          string `json:"category"`
	Ccy               string `json:"ccy"`
	ClOrdID           string `json:"clOrdId"`
	Fee               string `json:"fee"`
	FeeCcy            string `json:"feeCcy"`
	FillPx            string `json:"fillPx"`
	FillSz            string `json:"fillSz"`
	FillTime          string `json:"fillTime"`
	InstID            string `json:"instId"`
	InstType          string `json:"instType"`
	Lever             string `json:"lever"`
	OrdID             string `json:"ordId"`
	OrdType           string `json:"ordType"`
	Pnl               string `json:"pnl"`
	PosSide           string `json:"posSide"`
	Px                string `json:"px"`
	PxUsd             string `json:"pxUsd"`
	PxVol             string `json:"pxVol"`
	PxType            string `json:"pxType"`
	Rebate            string `json:"rebate"`
	RebateCcy         string `json:"rebateCcy"`
	Side              string `json:"side"`
	AttachAlgoClOrdID string `json:"attachAlgoClOrdId"`
	SlOrdPx           string `json:"slOrdPx"`
	SlTriggerPx       string `json:"slTriggerPx"`
	SlTriggerPxType   string `json:"slTriggerPxType"`
	State             string `json:"state"`
	StpID             string `json:"stpId"`
	StpMode           string `json:"stpMode"`
	Sz                string `json:"sz"`
	Tag               string `json:"tag"`
	TgtCcy            string `json:"tgtCcy"`
	TdMode            string `json:"tdMode"`
	Source            string `json:"source"`
	TpOrdPx           string `json:"tpOrdPx"`
	TpTriggerPx       string `json:"tpTriggerPx"`
	TpTriggerPxType   string `json:"tpTriggerPxType"`
	TradeID           string `json:"tradeId"`
	ReduceOnly        string `json:"reduceOnly"`
	QuickMgnType      string `json:"quickMgnType"`
	AlgoClOrdID       string `json:"algoClOrdId"`
	AlgoID            string `json:"algoId"`
	UTime             string `json:"uTime"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "accFillSz":
			out.AccFillSz = string(in.String())
		case "avgPx":
			out.AvgPx = string(in.String())
		case "cTime":
			out.CTime = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "ccy":
			out.Ccy = string(in.String())
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "fee":
			out.Fee = string(in.String())
		case "feeCcy":
			out.FeeCcy = string(in.String())
		case "fillPx":
			out.FillPx = string(in.String())
		case "fillSz":
			out.FillSz = string(in.String())
		case "fillTime":
			out.FillTime = string(in.String())
		case "instId":
			out.InstID = string(in.String())
		case "instType":
			out.InstType = string(in.String())
		case "lever":
			out.Lever = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "ordType":
			out.OrdType = string(in.String())
		case "pnl":
			out.Pnl = string(in.String())
		case "posSide":
			out.PosSide = string(in.String())
		case "px":
			out.Px = string(in.String())
		case "pxUsd":
			out.PxUsd = string(in.String())
		case "pxVol":
			out.PxVol = string(in.String())
		case "pxType":
			out.PxType = string(in.String())
		case "rebate":
			out.Rebate = string(in.String())
		case "rebateCcy":
			out.RebateCcy = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "attachAlgoClOrdId":
			out.AttachAlgoClOrdID = string(in.String())
		case "slOrdPx":
			out.SlOrdPx = string(in.String())
		case "slTriggerPx":
			out.SlTriggerPx = string(in.String())
		case "slTriggerPxType":
			out.SlTriggerPxType = string(in.String())
		case "state":
			out.State = string(in.String())
		case "stpId":
			out.StpID = string(in.String())
		case "stpMode":
			out.StpMode = string(in.String())
		case "sz":
			out.Sz = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "tgtCcy":
			out.TgtCcy = string(in.String())
		case "tdMode":
			out.TdMode = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "tpOrdPx":
			out.TpOrdPx = string(in.String())
		case "tpTriggerPx":
			out.TpTriggerPx = string(in.String())
		case "tpTriggerPxType":
			out.TpTriggerPxType = string(in.String())
		case "tradeId":
			out.TradeID = string(in.String())
		case "reduceOnly":
			out.ReduceOnly = string(in.String())
		case "quickMgnType":
			out.QuickMgnType = string(in.String())
		case "algoClOrdId":
			out.AlgoClOrdID = string(in.String())
		case "algoId":
			out.AlgoID = string(in.String())
		case "uTime":
			out.UTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode(out *jwriter.Writer, in struct {
	AccFillSz         string `json:"accFillSz"`
	AvgPx             string `json:"avgPx"`
	CTime             string `json:"cTime"`
	Category          string `json:"category"`
	Ccy               string `json:"ccy"`
	ClOrdID           string `json:"clOrdId"`
	Fee               string `json:"fee"`
	FeeCcy            string `json:"feeCcy"`
	FillPx            string `json:"fillPx"`
	FillSz            string `json:"fillSz"`
	FillTime          string `json:"fillTime"`
	InstID            string `json:"instId"`
	InstType          string `json:"instType"`
	Lever             string `json:"lever"`
	OrdID             string `json:"ordId"`
	OrdType           string `json:"ordType"`
	Pnl               string `json:"pnl"`
	PosSide           string `json:"posSide"`
	Px                string `json:"px"`
	PxUsd             string `json:"pxUsd"`
	PxVol             string `json:"pxVol"`
	PxType            string `json:"pxType"`
	Rebate            string `json:"rebate"`
	RebateCcy         string `json:"rebateCcy"`
	Side              string `json:"side"`
	AttachAlgoClOrdID string `json:"attachAlgoClOrdId"`
	SlOrdPx           string `json:"slOrdPx"`
	SlTriggerPx       string `json:"slTriggerPx"`
	SlTriggerPxType   string `json:"slTriggerPxType"`
	State             string `json:"state"`
	StpID             string `json:"stpId"`
	StpMode           string `json:"stpMode"`
	Sz                string `json:"sz"`
	Tag               string `json:"tag"`
	TgtCcy            string `json:"tgtCcy"`
	TdMode            string `json:"tdMode"`
	Source            string `json:"source"`
	TpOrdPx           string `json:"tpOrdPx"`
	TpTriggerPx       string `json:"tpTriggerPx"`
	TpTriggerPxType   string `json:"tpTriggerPxType"`
	TradeID           string `json:"tradeId"`
	ReduceOnly        string `json:"reduceOnly"`
	QuickMgnType      string `json:"quickMgnType"`
	AlgoClOrdID       string `json:"algoClOrdId"`
	AlgoID            string `json:"algoId"`
	UTime             string `json:"uTime"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"accFillSz\":"
		out.RawString(prefix[1:])
		out.String(string(in.AccFillSz))
	}
	{
		const prefix string = ",\"avgPx\":"
		out.RawString(prefix)
		out.String(string(in.AvgPx))
	}
	{
		const prefix string = ",\"cTime\":"
		out.RawString(prefix)
		out.String(string(in.CTime))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"ccy\":"
		out.RawString(prefix)
		out.String(string(in.Ccy))
	}
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix)
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.String(string(in.Fee))
	}
	{
		const prefix string = ",\"feeCcy\":"
		out.RawString(prefix)
		out.String(string(in.FeeCcy))
	}
	{
		const prefix string = ",\"fillPx\":"
		out.RawString(prefix)
		out.String(string(in.FillPx))
	}
	{
		const prefix string = ",\"fillSz\":"
		out.RawString(prefix)
		out.String(string(in.FillSz))
	}
	{
		const prefix string = ",\"fillTime\":"
		out.RawString(prefix)
		out.String(string(in.FillTime))
	}
	{
		const prefix string = ",\"instId\":"
		out.RawString(prefix)
		out.String(string(in.InstID))
	}
	{
		const prefix string = ",\"instType\":"
		out.RawString(prefix)
		out.String(string(in.InstType))
	}
	{
		const prefix string = ",\"lever\":"
		out.RawString(prefix)
		out.String(string(in.Lever))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"ordType\":"
		out.RawString(prefix)
		out.String(string(in.OrdType))
	}
	{
		const prefix string = ",\"pnl\":"
		out.RawString(prefix)
		out.String(string(in.Pnl))
	}
	{
		const prefix string = ",\"posSide\":"
		out.RawString(prefix)
		out.String(string(in.PosSide))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"pxUsd\":"
		out.RawString(prefix)
		out.String(string(in.PxUsd))
	}
	{
		const prefix string = ",\"pxVol\":"
		out.RawString(prefix)
		out.String(string(in.PxVol))
	}
	{
		const prefix string = ",\"pxType\":"
		out.RawString(prefix)
		out.String(string(in.PxType))
	}
	{
		const prefix string = ",\"rebate\":"
		out.RawString(prefix)
		out.String(string(in.Rebate))
	}
	{
		const prefix string = ",\"rebateCcy\":"
		out.RawString(prefix)
		out.String(string(in.RebateCcy))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"attachAlgoClOrdId\":"
		out.RawString(prefix)
		out.String(string(in.AttachAlgoClOrdID))
	}
	{
		const prefix string = ",\"slOrdPx\":"
		out.RawString(prefix)
		out.String(string(in.SlOrdPx))
	}
	{
		const prefix string = ",\"slTriggerPx\":"
		out.RawString(prefix)
		out.String(string(in.SlTriggerPx))
	}
	{
		const prefix string = ",\"slTriggerPxType\":"
		out.RawString(prefix)
		out.String(string(in.SlTriggerPxType))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"stpId\":"
		out.RawString(prefix)
		out.String(string(in.StpID))
	}
	{
		const prefix string = ",\"stpMode\":"
		out.RawString(prefix)
		out.String(string(in.StpMode))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"tgtCcy\":"
		out.RawString(prefix)
		out.String(string(in.TgtCcy))
	}
	{
		const prefix string = ",\"tdMode\":"
		out.RawString(prefix)
		out.String(string(in.TdMode))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"tpOrdPx\":"
		out.RawString(prefix)
		out.String(string(in.TpOrdPx))
	}
	{
		const prefix string = ",\"tpTriggerPx\":"
		out.RawString(prefix)
		out.String(string(in.TpTriggerPx))
	}
	{
		const prefix string = ",\"tpTriggerPxType\":"
		out.RawString(prefix)
		out.String(string(in.TpTriggerPxType))
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.String(string(in.ReduceOnly))
	}
	{
		const prefix string = ",\"quickMgnType\":"
		out.RawString(prefix)
		out.String(string(in.QuickMgnType))
	}
	{
		const prefix string = ",\"algoClOrdId\":"
		out.RawString(prefix)
		out.String(string(in.AlgoClOrdID))
	}
	{
		const prefix string = ",\"algoId\":"
		out.RawString(prefix)
		out.String(string(in.AlgoID))
	}
	{
		const prefix string = ",\"uTime\":"
		out.RawString(prefix)
		out.String(string(in.UTime))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(in *jlexer.Lexer, out *HistoricalOrder) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instType":
			out.InstType = string(in.String())
		case "instId":
			out.InstID = string(in.String())
		case "ccy":
			out.Ccy = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "px":
			out.Px = string(in.String())
		case "pxUsd":
			out.PxUsd = string(in.String())
		case "pxVol":
			out.PxVol = string(in.String())
		case "pxType":
			out.PxType = string(in.String())
		case "sz":
			out.Sz = string(in.String())
		case "ordType":
			out.OrdType = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "posSide":
			out.PosSide = string(in.String())
		case "tdMode":
			out.TdMode = string(in.String())
		case "accFillSz":
			out.AccFillSz = string(in.String())
		case "fillPx":
			out.FillPx = string(in.String())
		case "tradeId":
			out.TradeID = string(in.String())
		case "fillSz":
			out.FillSz = string(in.String())
		case "fillTime":
			out.FillTime = string(in.String())
		case "state":
			out.State = string(in.String())
		case "avgPx":
			out.AvgPx = string(in.String())
		case "lever":
			out.Lever = string(in.String())
		case "attachAlgoClOrdId":
			out.AttachAlgoClOrdID = string(in.String())
		case "tpTriggerPx":
			out.TpTriggerPx = string(in.String())
		case "tpTriggerPxType":
			out.TpTriggerPxType = string(in.String())
		case "tpOrdPx":
			out.TpOrdPx = string(in.String())
		case "slTriggerPx":
			out.SlTriggerPx = string(in.String())
		case "slTriggerPxType":
			out.SlTriggerPxType = string(in.String())
		case "slOrdPx":
			out.SlOrdPx = string(in.String())
		case "stpId":
			out.StpID = string(in.String())
		case "stpMode":
			out.StpMode = string(in.String())
		case "feeCcy":
			out.FeeCcy = string(in.String())
		case "fee":
			out.Fee = string(in.String())
		case "rebateCcy":
			out.RebateCcy = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "rebate":
			out.Rebate = string(in.String())
		case "tgtCcy":
			out.TgtCcy = string(in.String())
		case "pnl":
			out.Pnl = string(in.String())
		case "category":
			out.Category = string(in.String())
		case "reduceOnly":
			out.ReduceOnly = string(in.String())
		case "cancelSource":
			out.CancelSource = string(in.String())
		case "cancelSourceReason":
			out.CancelSourceReason = string(in.String())
		case "algoClOrdId":
			out.AlgoClOrdID = string(in.String())
		case "algoId":
			out.AlgoID = string(in.String())
		case "uTime":
			out.UTime = string(in.String())
		case "cTime":
			out.CTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(out *jwriter.Writer, in HistoricalOrder) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instType\":"
		out.RawString(prefix[1:])
		out.String(string(in.InstType))
	}
	{
		const prefix string = ",\"instId\":"
		out.RawString(prefix)
		out.String(string(in.InstID))
	}
	{
		const prefix string = ",\"ccy\":"
		out.RawString(prefix)
		out.String(string(in.Ccy))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix)
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"px\":"
		out.RawString(prefix)
		out.String(string(in.Px))
	}
	{
		const prefix string = ",\"pxUsd\":"
		out.RawString(prefix)
		out.String(string(in.PxUsd))
	}
	{
		const prefix string = ",\"pxVol\":"
		out.RawString(prefix)
		out.String(string(in.PxVol))
	}
	{
		const prefix string = ",\"pxType\":"
		out.RawString(prefix)
		out.String(string(in.PxType))
	}
	{
		const prefix string = ",\"sz\":"
		out.RawString(prefix)
		out.String(string(in.Sz))
	}
	{
		const prefix string = ",\"ordType\":"
		out.RawString(prefix)
		out.String(string(in.OrdType))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"posSide\":"
		out.RawString(prefix)
		out.String(string(in.PosSide))
	}
	{
		const prefix string = ",\"tdMode\":"
		out.RawString(prefix)
		out.String(string(in.TdMode))
	}
	{
		const prefix string = ",\"accFillSz\":"
		out.RawString(prefix)
		out.String(string(in.AccFillSz))
	}
	{
		const prefix string = ",\"fillPx\":"
		out.RawString(prefix)
		out.String(string(in.FillPx))
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"fillSz\":"
		out.RawString(prefix)
		out.String(string(in.FillSz))
	}
	{
		const prefix string = ",\"fillTime\":"
		out.RawString(prefix)
		out.String(string(in.FillTime))
	}
	{
		const prefix string = ",\"state\":"
		out.RawString(prefix)
		out.String(string(in.State))
	}
	{
		const prefix string = ",\"avgPx\":"
		out.RawString(prefix)
		out.String(string(in.AvgPx))
	}
	{
		const prefix string = ",\"lever\":"
		out.RawString(prefix)
		out.String(string(in.Lever))
	}
	{
		const prefix string = ",\"attachAlgoClOrdId\":"
		out.RawString(prefix)
		out.String(string(in.AttachAlgoClOrdID))
	}
	{
		const prefix string = ",\"tpTriggerPx\":"
		out.RawString(prefix)
		out.String(string(in.TpTriggerPx))
	}
	{
		const prefix string = ",\"tpTriggerPxType\":"
		out.RawString(prefix)
		out.String(string(in.TpTriggerPxType))
	}
	{
		const prefix string = ",\"tpOrdPx\":"
		out.RawString(prefix)
		out.String(string(in.TpOrdPx))
	}
	{
		const prefix string = ",\"slTriggerPx\":"
		out.RawString(prefix)
		out.String(string(in.SlTriggerPx))
	}
	{
		const prefix string = ",\"slTriggerPxType\":"
		out.RawString(prefix)
		out.String(string(in.SlTriggerPxType))
	}
	{
		const prefix string = ",\"slOrdPx\":"
		out.RawString(prefix)
		out.String(string(in.SlOrdPx))
	}
	{
		const prefix string = ",\"stpId\":"
		out.RawString(prefix)
		out.String(string(in.StpID))
	}
	{
		const prefix string = ",\"stpMode\":"
		out.RawString(prefix)
		out.String(string(in.StpMode))
	}
	{
		const prefix string = ",\"feeCcy\":"
		out.RawString(prefix)
		out.String(string(in.FeeCcy))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.String(string(in.Fee))
	}
	{
		const prefix string = ",\"rebateCcy\":"
		out.RawString(prefix)
		out.String(string(in.RebateCcy))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"rebate\":"
		out.RawString(prefix)
		out.String(string(in.Rebate))
	}
	{
		const prefix string = ",\"tgtCcy\":"
		out.RawString(prefix)
		out.String(string(in.TgtCcy))
	}
	{
		const prefix string = ",\"pnl\":"
		out.RawString(prefix)
		out.String(string(in.Pnl))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		out.String(string(in.Category))
	}
	{
		const prefix string = ",\"reduceOnly\":"
		out.RawString(prefix)
		out.String(string(in.ReduceOnly))
	}
	{
		const prefix string = ",\"cancelSource\":"
		out.RawString(prefix)
		out.String(string(in.CancelSource))
	}
	{
		const prefix string = ",\"cancelSourceReason\":"
		out.RawString(prefix)
		out.String(string(in.CancelSourceReason))
	}
	{
		const prefix string = ",\"algoClOrdId\":"
		out.RawString(prefix)
		out.String(string(in.AlgoClOrdID))
	}
	{
		const prefix string = ",\"algoId\":"
		out.RawString(prefix)
		out.String(string(in.AlgoID))
	}
	{
		const prefix string = ",\"uTime\":"
		out.RawString(prefix)
		out.String(string(in.UTime))
	}
	{
		const prefix string = ",\"cTime\":"
		out.RawString(prefix)
		out.String(string(in.CTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoricalOrder) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoricalOrder) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoricalOrder) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoricalOrder) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx2(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(in *jlexer.Lexer, out *HistoricalFill) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "instType":
			out.InstType = string(in.String())
		case "instId":
			out.InstID = string(in.String())
		case "tradeId":
			out.TradeID = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "billId":
			out.BillID = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "fillPx":
			out.FillPx = string(in.String())
		case "fillSz":
			out.FillSz = string(in.String())
		case "fillIdxPx":
			out.FillIdxPx = string(in.String())
		case "fillPnl":
			out.FillPnl = string(in.String())
		case "fillPxVol":
			out.FillPxVol = string(in.String())
		case "fillPxUsd":
			out.FillPxUsd = string(in.String())
		case "fillMarkVol":
			out.FillMarkVol = string(in.String())
		case "fillFwdPx":
			out.FillFwdPx = string(in.String())
		case "fillMarkPx":
			out.FillMarkPx = string(in.String())
		case "side":
			out.Side = string(in.String())
		case "posSide":
			out.PosSide = string(in.String())
		case "execType":
			out.ExecType = string(in.String())
		case "feeCcy":
			out.FeeCcy = string(in.String())
		case "fee":
			out.Fee = string(in.String())
		case "ts":
			out.TS = string(in.String())
		case "fillTime":
			out.FillTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(out *jwriter.Writer, in HistoricalFill) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"instType\":"
		out.RawString(prefix[1:])
		out.String(string(in.InstType))
	}
	{
		const prefix string = ",\"instId\":"
		out.RawString(prefix)
		out.String(string(in.InstID))
	}
	{
		const prefix string = ",\"tradeId\":"
		out.RawString(prefix)
		out.String(string(in.TradeID))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix)
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"billId\":"
		out.RawString(prefix)
		out.String(string(in.BillID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"fillPx\":"
		out.RawString(prefix)
		out.String(string(in.FillPx))
	}
	{
		const prefix string = ",\"fillSz\":"
		out.RawString(prefix)
		out.String(string(in.FillSz))
	}
	{
		const prefix string = ",\"fillIdxPx\":"
		out.RawString(prefix)
		out.String(string(in.FillIdxPx))
	}
	{
		const prefix string = ",\"fillPnl\":"
		out.RawString(prefix)
		out.String(string(in.FillPnl))
	}
	{
		const prefix string = ",\"fillPxVol\":"
		out.RawString(prefix)
		out.String(string(in.FillPxVol))
	}
	{
		const prefix string = ",\"fillPxUsd\":"
		out.RawString(prefix)
		out.String(string(in.FillPxUsd))
	}
	{
		const prefix string = ",\"fillMarkVol\":"
		out.RawString(prefix)
		out.String(string(in.FillMarkVol))
	}
	{
		const prefix string = ",\"fillFwdPx\":"
		out.RawString(prefix)
		out.String(string(in.FillFwdPx))
	}
	{
		const prefix string = ",\"fillMarkPx\":"
		out.RawString(prefix)
		out.String(string(in.FillMarkPx))
	}
	{
		const prefix string = ",\"side\":"
		out.RawString(prefix)
		out.String(string(in.Side))
	}
	{
		const prefix string = ",\"posSide\":"
		out.RawString(prefix)
		out.String(string(in.PosSide))
	}
	{
		const prefix string = ",\"execType\":"
		out.RawString(prefix)
		out.String(string(in.ExecType))
	}
	{
		const prefix string = ",\"feeCcy\":"
		out.RawString(prefix)
		out.String(string(in.FeeCcy))
	}
	{
		const prefix string = ",\"fee\":"
		out.RawString(prefix)
		out.String(string(in.Fee))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.String(string(in.TS))
	}
	{
		const prefix string = ",\"fillTime\":"
		out.RawString(prefix)
		out.String(string(in.FillTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v HistoricalFill) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v HistoricalFill) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *HistoricalFill) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *HistoricalFill) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx3(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(in *jlexer.Lexer, out *FillsHistoryResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]HistoricalFill, 0, 0)
					} else {
						out.Data = []HistoricalFill{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v7 HistoricalFill
					(v7).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(out *jwriter.Writer, in FillsHistoryResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Data {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v FillsHistoryResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v FillsHistoryResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *FillsHistoryResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *FillsHistoryResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx4(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(in *jlexer.Lexer, out *CreateOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							Tag     string `json:"tag"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}, 0, 0)
					} else {
						out.Data = []struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							Tag     string `json:"tag"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v10 struct {
						ClOrdID string `json:"clOrdId"`
						OrdID   string `json:"ordId"`
						Tag     string `json:"tag"`
						SCode   string `json:"sCode"`
						SMsg    string `json:"sMsg"`
					}
					easyjson9d6b4be7Decode1(in, &v10)
					out.Data = append(out.Data, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(out *jwriter.Writer, in CreateOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Data {
				if v11 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode1(out, v12)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx5(l, v)
}
func easyjson9d6b4be7Decode1(in *jlexer.Lexer, out *struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	Tag     string `json:"tag"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "tag":
			out.Tag = string(in.String())
		case "sCode":
			out.SCode = string(in.String())
		case "sMsg":
			out.SMsg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode1(out *jwriter.Writer, in struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	Tag     string `json:"tag"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"tag\":"
		out.RawString(prefix)
		out.String(string(in.Tag))
	}
	{
		const prefix string = ",\"sCode\":"
		out.RawString(prefix)
		out.String(string(in.SCode))
	}
	{
		const prefix string = ",\"sMsg\":"
		out.RawString(prefix)
		out.String(string(in.SMsg))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(in *jlexer.Lexer, out *CancelOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}, 0, 1)
					} else {
						out.Data = []struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v13 struct {
						ClOrdID string `json:"clOrdId"`
						OrdID   string `json:"ordId"`
						SCode   string `json:"sCode"`
						SMsg    string `json:"sMsg"`
					}
					easyjson9d6b4be7Decode2(in, &v13)
					out.Data = append(out.Data, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(out *jwriter.Writer, in CancelOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Data {
				if v14 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode2(out, v15)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx6(l, v)
}
func easyjson9d6b4be7Decode2(in *jlexer.Lexer, out *struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "sCode":
			out.SCode = string(in.String())
		case "sMsg":
			out.SMsg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode2(out *jwriter.Writer, in struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"sCode\":"
		out.RawString(prefix)
		out.String(string(in.SCode))
	}
	{
		const prefix string = ",\"sMsg\":"
		out.RawString(prefix)
		out.String(string(in.SMsg))
	}
	out.RawByte('}')
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(in *jlexer.Lexer, out *CancelAllOrdersAfterMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]CancelAllAfterData, 0, 2)
					} else {
						out.Data = []CancelAllAfterData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v16 CancelAllAfterData
					(v16).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(out *jwriter.Writer, in CancelAllOrdersAfterMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Data {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAllOrdersAfterMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAllOrdersAfterMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAllOrdersAfterMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAllOrdersAfterMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx7(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(in *jlexer.Lexer, out *CancelAllAfterData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "triggerTime":
			out.TriggerTime = string(in.String())
		case "ts":
			out.TS = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(out *jwriter.Writer, in CancelAllAfterData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"triggerTime\":"
		out.RawString(prefix[1:])
		out.String(string(in.TriggerTime))
	}
	{
		const prefix string = ",\"ts\":"
		out.RawString(prefix)
		out.String(string(in.TS))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CancelAllAfterData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CancelAllAfterData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CancelAllAfterData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CancelAllAfterData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx8(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(in *jlexer.Lexer, out *BaseResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]interface{}, 0, 4)
					} else {
						out.Data = []interface{}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v19 interface{}
					if m, ok := v19.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v19.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v19 = in.Interface()
					}
					out.Data = append(out.Data, v19)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(out *jwriter.Writer, in BaseResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Data {
				if v20 > 0 {
					out.RawByte(',')
				}
				if m, ok := v21.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v21.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v21))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BaseResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BaseResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BaseResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BaseResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx9(l, v)
}
func easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(in *jlexer.Lexer, out *AmendOrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							ReqID   string `json:"reqId"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}, 0, 0)
					} else {
						out.Data = []struct {
							ClOrdID string `json:"clOrdId"`
							OrdID   string `json:"ordId"`
							ReqID   string `json:"reqId"`
							SCode   string `json:"sCode"`
							SMsg    string `json:"sMsg"`
						}{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v22 struct {
						ClOrdID string `json:"clOrdId"`
						OrdID   string `json:"ordId"`
						ReqID   string `json:"reqId"`
						SCode   string `json:"sCode"`
						SMsg    string `json:"sMsg"`
					}
					easyjson9d6b4be7Decode3(in, &v22)
					out.Data = append(out.Data, v22)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(out *jwriter.Writer, in AmendOrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.String(string(in.Code))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix)
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.Data {
				if v23 > 0 {
					out.RawByte(',')
				}
				easyjson9d6b4be7Encode3(out, v24)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AmendOrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AmendOrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9d6b4be7EncodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AmendOrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AmendOrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9d6b4be7DecodeStudentgitKataAcademyQuantTorqueInternalAdaptersClientsTypesOkx10(l, v)
}
func easyjson9d6b4be7Decode3(in *jlexer.Lexer, out *struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	ReqID   string `json:"reqId"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "clOrdId":
			out.ClOrdID = string(in.String())
		case "ordId":
			out.OrdID = string(in.String())
		case "reqId":
			out.ReqID = string(in.String())
		case "sCode":
			out.SCode = string(in.String())
		case "sMsg":
			out.SMsg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9d6b4be7Encode3(out *jwriter.Writer, in struct {
	ClOrdID string `json:"clOrdId"`
	OrdID   string `json:"ordId"`
	ReqID   string `json:"reqId"`
	SCode   string `json:"sCode"`
	SMsg    string `json:"sMsg"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"clOrdId\":"
		out.RawString(prefix[1:])
		out.String(string(in.ClOrdID))
	}
	{
		const prefix string = ",\"ordId\":"
		out.RawString(prefix)
		out.String(string(in.OrdID))
	}
	{
		const prefix string = ",\"reqId\":"
		out.RawString(prefix)
		out.String(string(in.ReqID))
	}
	{
		const prefix string = ",\"sCode\":"
		out.RawString(prefix)
		out.String(string(in.SCode))
	}
	{
		const prefix string = ",\"sMsg\":"
		out.RawString(prefix)
		out.String(string(in.SMsg))
	}
	out.RawByte('}')
}
