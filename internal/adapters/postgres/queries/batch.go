// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: batch.go

package queries

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v4"
	"github.com/shopspring/decimal"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const InsertInstrumentsDetails = `-- name: InsertInstrumentsDetails :batchexec
INSERT INTO quant.instrument_details (exchange, local_symbol, exchange_symbol, price_precision, size_precision, min_lot)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (exchange, local_symbol, exchange_symbol) DO UPDATE SET price_precision=EXCLUDED.price_precision,
                                                                    size_precision=EXCLUDED.size_precision,
                                                                    min_lot=EXCLUDED.min_lot,
                                                                    updated_at     = NOW()
`

type InsertInstrumentsDetailsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertInstrumentsDetailsParams struct {
	Exchange       string
	LocalSymbol    string
	ExchangeSymbol string
	PricePrecision int32
	SizePrecision  int32
	MinLot         decimal.Decimal
}

func (q *Queries) InsertInstrumentsDetails(ctx context.Context, arg []InsertInstrumentsDetailsParams) *InsertInstrumentsDetailsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Exchange,
			a.LocalSymbol,
			a.ExchangeSymbol,
			a.PricePrecision,
			a.SizePrecision,
			a.MinLot,
		}
		batch.Queue(InsertInstrumentsDetails, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InsertInstrumentsDetailsBatchResults{br, len(arg), false}
}

func (b *InsertInstrumentsDetailsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *InsertInstrumentsDetailsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}

const InsertNameResolvers = `-- name: InsertNameResolvers :batchexec
INSERT INTO quant.name_resolvers (exchange, local_symbol, exchange_symbol)
VALUES ($1, $2, $3)
ON CONFLICT (exchange, local_symbol, exchange_symbol) DO UPDATE SET updated_at = NOW()
`

type InsertNameResolversBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type InsertNameResolversParams struct {
	Exchange       string
	LocalSymbol    string
	ExchangeSymbol string
}

func (q *Queries) InsertNameResolvers(ctx context.Context, arg []InsertNameResolversParams) *InsertNameResolversBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Exchange,
			a.LocalSymbol,
			a.ExchangeSymbol,
		}
		batch.Queue(InsertNameResolvers, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &InsertNameResolversBatchResults{br, len(arg), false}
}

func (b *InsertNameResolversBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *InsertNameResolversBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
