// Code generated by mockery v2.40.3. DO NOT EDIT.

package mocks

import (
	sarama "github.com/IBM/sarama"
	mock "github.com/stretchr/testify/mock"
)

// ConsumerGroupClaim is an autogenerated mock type for the ConsumerGroupClaim type
type ConsumerGroupClaim struct {
	mock.Mock
}

type ConsumerGroupClaim_Expecter struct {
	mock *mock.Mock
}

func (_m *ConsumerGroupClaim) EXPECT() *ConsumerGroupClaim_Expecter {
	return &ConsumerGroupClaim_Expecter{mock: &_m.Mock}
}

// HighWaterMarkOffset provides a mock function with given fields:
func (_m *ConsumerGroupClaim) HighWaterMarkOffset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HighWaterMarkOffset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ConsumerGroupClaim_HighWaterMarkOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HighWaterMarkOffset'
type ConsumerGroupClaim_HighWaterMarkOffset_Call struct {
	*mock.Call
}

// HighWaterMarkOffset is a helper method to define mock.On call
func (_e *ConsumerGroupClaim_Expecter) HighWaterMarkOffset() *ConsumerGroupClaim_HighWaterMarkOffset_Call {
	return &ConsumerGroupClaim_HighWaterMarkOffset_Call{Call: _e.mock.On("HighWaterMarkOffset")}
}

func (_c *ConsumerGroupClaim_HighWaterMarkOffset_Call) Run(run func()) *ConsumerGroupClaim_HighWaterMarkOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerGroupClaim_HighWaterMarkOffset_Call) Return(_a0 int64) *ConsumerGroupClaim_HighWaterMarkOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerGroupClaim_HighWaterMarkOffset_Call) RunAndReturn(run func() int64) *ConsumerGroupClaim_HighWaterMarkOffset_Call {
	_c.Call.Return(run)
	return _c
}

// InitialOffset provides a mock function with given fields:
func (_m *ConsumerGroupClaim) InitialOffset() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for InitialOffset")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// ConsumerGroupClaim_InitialOffset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitialOffset'
type ConsumerGroupClaim_InitialOffset_Call struct {
	*mock.Call
}

// InitialOffset is a helper method to define mock.On call
func (_e *ConsumerGroupClaim_Expecter) InitialOffset() *ConsumerGroupClaim_InitialOffset_Call {
	return &ConsumerGroupClaim_InitialOffset_Call{Call: _e.mock.On("InitialOffset")}
}

func (_c *ConsumerGroupClaim_InitialOffset_Call) Run(run func()) *ConsumerGroupClaim_InitialOffset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerGroupClaim_InitialOffset_Call) Return(_a0 int64) *ConsumerGroupClaim_InitialOffset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerGroupClaim_InitialOffset_Call) RunAndReturn(run func() int64) *ConsumerGroupClaim_InitialOffset_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *ConsumerGroupClaim) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerMessage)
		}
	}

	return r0
}

// ConsumerGroupClaim_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type ConsumerGroupClaim_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *ConsumerGroupClaim_Expecter) Messages() *ConsumerGroupClaim_Messages_Call {
	return &ConsumerGroupClaim_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *ConsumerGroupClaim_Messages_Call) Run(run func()) *ConsumerGroupClaim_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerGroupClaim_Messages_Call) Return(_a0 <-chan *sarama.ConsumerMessage) *ConsumerGroupClaim_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerGroupClaim_Messages_Call) RunAndReturn(run func() <-chan *sarama.ConsumerMessage) *ConsumerGroupClaim_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// Partition provides a mock function with given fields:
func (_m *ConsumerGroupClaim) Partition() int32 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Partition")
	}

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// ConsumerGroupClaim_Partition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Partition'
type ConsumerGroupClaim_Partition_Call struct {
	*mock.Call
}

// Partition is a helper method to define mock.On call
func (_e *ConsumerGroupClaim_Expecter) Partition() *ConsumerGroupClaim_Partition_Call {
	return &ConsumerGroupClaim_Partition_Call{Call: _e.mock.On("Partition")}
}

func (_c *ConsumerGroupClaim_Partition_Call) Run(run func()) *ConsumerGroupClaim_Partition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerGroupClaim_Partition_Call) Return(_a0 int32) *ConsumerGroupClaim_Partition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerGroupClaim_Partition_Call) RunAndReturn(run func() int32) *ConsumerGroupClaim_Partition_Call {
	_c.Call.Return(run)
	return _c
}

// Topic provides a mock function with given fields:
func (_m *ConsumerGroupClaim) Topic() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topic")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConsumerGroupClaim_Topic_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Topic'
type ConsumerGroupClaim_Topic_Call struct {
	*mock.Call
}

// Topic is a helper method to define mock.On call
func (_e *ConsumerGroupClaim_Expecter) Topic() *ConsumerGroupClaim_Topic_Call {
	return &ConsumerGroupClaim_Topic_Call{Call: _e.mock.On("Topic")}
}

func (_c *ConsumerGroupClaim_Topic_Call) Run(run func()) *ConsumerGroupClaim_Topic_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConsumerGroupClaim_Topic_Call) Return(_a0 string) *ConsumerGroupClaim_Topic_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConsumerGroupClaim_Topic_Call) RunAndReturn(run func() string) *ConsumerGroupClaim_Topic_Call {
	_c.Call.Return(run)
	return _c
}

// NewConsumerGroupClaim creates a new instance of ConsumerGroupClaim. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsumerGroupClaim(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConsumerGroupClaim {
	mock := &ConsumerGroupClaim{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
